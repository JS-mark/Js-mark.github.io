<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>35岁双非前端程序员：在压力与机遇间摇摆</title>
    <url>//2025/03/02/35%E5%B2%81%E5%8F%8C%E9%9D%9E%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%91%98%EF%BC%9A%E5%9C%A8%E5%8E%8B%E5%8A%9B%E4%B8%8E%E6%9C%BA%E9%81%87%E9%97%B4%E6%91%87%E6%91%86/</url>
    <content><![CDATA[<html><head></head><body><p><img data-src="/img.png" alt="泰国旅行照"></p>
<p>身为一名 35 岁的双非前端程序员，近来我常感觉自己仿若一叶孤舟，漂泊在波涛汹涌的海面，四周皆是惊涛骇浪，而我拼尽全力维持平衡，一心探寻正确航向。</p>
<span id="more"></span>
<h2 id="家庭生活的-“甜蜜负担”"><a href="#家庭生活的-“甜蜜负担”" class="headerlink" title="家庭生活的 “甜蜜负担”"></a>家庭生活的 “甜蜜负担”</h2><p>我和爱人新婚不久，本以为会开启浪漫的二人世界，可现实却如同一部满是琐碎日常的家庭剧。每天下班到家，话题从代码中的 bug，变成了今晚吃啥，是点外卖还是下厨。要是决定自己做饭，那去菜市场就像一场 “战斗”，和大爷大妈们争抢最新鲜的蔬菜，仿佛这也是一场 “技术比拼”。</p>
<p>最近，生娃一事提上日程。这可不是小事，感觉就像从开发简单网页，直接升级到开发大型复杂应用程序。我们得恶补各类育儿知识，从给宝宝换尿布到进行早期教育，每一项都像一门全新的编程语言，陌生又复杂。且不说育儿知识的繁杂，单看生娃成本，就让人咋舌。有数据显示，从孩子呱呱坠地到 18 岁成年，一个家庭平均花费在 50 万到 100 万元之间。这巨额开支，宛如一座沉甸甸的财务大山，压得我们小两口有些喘不过气。</p>
<p>赡养双方老人也是义不容辞的责任。父母年纪渐长，身体难免出现小毛病。每次陪他们去医院，看着医院里熙熙攘攘的人群，排队挂号、看病、取药，一套流程下来，一天就过去了，身心俱疲，感觉比连续熬几个通宵写代码还累。并且，医疗费用也是一笔可观的支出。据统计，我国老年人年均医疗花费超 1 万元。这使得我们在努力打拼事业的同时，还得时刻关注父母健康，丝毫不敢松懈。</p>
<h2 id="北京买房的-“遥不可及”"><a href="#北京买房的-“遥不可及”" class="headerlink" title="北京买房的 “遥不可及”"></a>北京买房的 “遥不可及”</h2><p>在北京这座大城市，拥有一套属于自己的房子，是许多人的梦想，我也不例外。然而现实是，房价如同火箭般一路飙升。瞧着北京动辄每平方米几万元甚至十几万元的房价，再看看自己的钱包，那种无力感，就像拿着玩具水枪去对抗熊熊大火，力量悬殊。</p>
<p>为了早日实现买房梦，我和爱人开始各种省钱。以往偶尔还会出去吃顿大餐、看场电影，如今都改成在家做饭，在网上找免费电影资源。有时觉得自己就像勤劳的小蚂蚁，努力积攒每一粒 “粮食”，只为能在这座城市搭建起属于自己的 “小窝”。</p>
<h2 id="工作中的-“中年危机”"><a href="#工作中的-“中年危机”" class="headerlink" title="工作中的 “中年危机”"></a>工作中的 “中年危机”</h2><p>工作上，35 岁的我同样面临巨大压力。前端技术更新换代速度快得令人头晕目眩，就好比你刚学会骑自行车，别人已然开上了跑车。新框架、新工具层出不穷，React、Vue、Angular，还有众多小众却功能强大的框架，刚学完一个，下一个又冒出来了。</p>
<p>据相关调查，超 70% 的前端开发者认为技术更新过快是他们面临的最大难题之一。年轻时，大脑像海绵，吸收知识迅速，如今呢？感觉自己的脑子就像吸满水的海绵，再想装进新东西，难如登天。学习新东西的速度赶不上遗忘旧知识的速度，每次看到新的技术文档，心里就直发怵。</p>
<p>在职场上，35 岁仿佛成了一道难以逾越的坎。不少公司招聘时，明确要求年龄在 30 岁以下。数据显示，80% 的互联网基层岗位限定 “30 岁以下”。我们这些 35 岁的程序员，仿佛正被时代列车缓缓甩在身后。想要晋升，更是难上加难。往上发展，竞争异常激烈，而且所需的不仅仅是技术能力，还得具备管理能力、沟通能力等多方面的综合素质。</p>
<p>再瞧瞧身边的年轻同事，他们活力满满，加班熬夜不在话下，对新技术的接受能力更是超强。有时和他们探讨技术问题，感觉自己就像个 “老古董”，根本跟不上他们的节奏。</p>
<h2 id="AI-带来的机遇之光"><a href="#AI-带来的机遇之光" class="headerlink" title="AI 带来的机遇之光"></a>AI 带来的机遇之光</h2><p>就在我被这些压力压得快喘不过气时，AI 的出现，宛如黑暗中的一道曙光，给我带来了新希望。</p>
<p>AI 在前端开发领域的应用日益广泛，带来诸多机遇。例如，AI 能助力我们自动生成代码。以往编写一个简单页面布局，可能得耗费几个小时，如今借助一些 AI 代码生成工具，只需输入简短描述，短短几分钟就能生成基础代码框架，开发效率大幅提升。有数据表明，使用 AI 代码生成工具，开发效率可提高 30% - 50%。这就如同拥有一个超级助手，能帮我分担大量重复性工作，让我有更多精力专注于更具创造性的任务。</p>
<p>AI 还能辅助我们进行代码优化与错误检测。它能分析我们编写的代码，精准找出潜在问题与优化点，恰似一位专业的代码审查员。而且，AI 在个性化用户体验方面潜力巨大。通过分析用户行为数据与偏好，我们可借助 AI 为用户打造更具个性化的界面与交互，提升用户体验，这对增强产品竞争力大有裨益。</p>
<p>此外，AI 的发展为我们前端程序员开辟了新的职业转型路径。我们可朝着 AI 前端开发方向转型，成为既精通前端技术又懂 AI 应用的复合型人才。这类人才在市场上极为抢手，薪资待遇也相当优厚。据统计，掌握 AI 技术的前端程序员，平均薪资较普通前端程序员高出 20% - 30%。</p>
<h2 id="抓住机遇，迎接挑战"><a href="#抓住机遇，迎接挑战" class="headerlink" title="抓住机遇，迎接挑战"></a>抓住机遇，迎接挑战</h2><p>面对 AI 带来的机遇，我深知不能再固步自封，必须积极学习，提升自身能力。我开始利用业余时间学习 AI 相关知识与技能，参加线上课程、阅读相关书籍和论文。虽说学习过程并不轻松，有时一些复杂算法和概念让人头疼不已，但我明白，这是突破困境的必经之路。</p>
<p>我也尝试将 AI 技术运用到实际工作中。比如在近期的一个项目里，我运用 AI 代码生成工具生成部分基础代码，然后在此基础上进行个性化修改与完善。这不仅加快了项目开发进度，还让我对 AI 技术有了更深入的理解与实践经验。</p>
<p>在这个充满挑战与机遇的时代，作为一名 35 岁的双非前端程序员，即便面临家庭、生活和工作的重重压力，可我也看到了 AI 带来的无限可能。我坚信，只要保持积极的学习态度，持续提升自己，就一定能在这片波涛汹涌的大海中找准航向，驶向成功彼岸。正如那句名言所说：“机遇总是留给有准备的人。” 我要做好充分准备，迎接未来挑战，抓住属于自己的机遇。</p>
<p>P.S. 巴拉巴拉半天，希望大家别烦我哈，发发牢骚！</p>
</body></html>]]></content>
      <tags>
        <tag>代码人生、琐碎生活</tag>
      </tags>
  </entry>
  <entry>
    <title>DayJs使用</title>
    <url>//2018/11/30/DayJs/</url>
    <content><![CDATA[<html><head></head><body><p align="center">
    <a href="#" target="_blank" rel="noopener noreferrer">
        <img width="550" data-src="https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png" alt="Day.js">
    </a>
</p>
<p align="center">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p>
<span id="more"></span>
<br>
<p align="center">
    <a href="https://unpkg.com/dayjs/dayjs.min.js">
        <img data-src="http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&amp;style=flat-square" alt="Gzip Size">
    </a>
    <a href="https://www.npmjs.com/package/dayjs"><img data-src="https://img.shields.io/npm/v/dayjs.svg?style=flat-square" alt="NPM Version"></a>
    <a href="https://travis-ci.org/iamkun/dayjs">
        <img data-src="https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square" alt="Build Status">
    </a>
    <a href="https://codecov.io/gh/iamkun/dayjs">
        <img data-src="https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square" alt="Codecov">
    </a>
    <a href="https://github.com/iamkun/dayjs/blob/master/LICENSE">
        <img data-src="https://img.shields.io/npm/l/dayjs.svg?style=flat-square" alt="License"></a>
    <br>
    <a href="https://saucelabs.com/u/dayjs">
        <img width="750" data-src="https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png" alt="Sauce Test Status">
    </a>
</p>

<blockquote>
<p>Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">dayjs</span>()</span><br><span class="line">  .<span class="title function_">startOf</span>(<span class="string">"month"</span>)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="number">1</span>, <span class="string">"day"</span>)</span><br><span class="line">  .<span class="title function_">set</span>(<span class="string">"year"</span>, <span class="number">2018</span>)</span><br><span class="line">  .<span class="title function_">format</span>(<span class="string">"YYYY-MM-DD HH:mm:ss"</span>);</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>🕒 和 Moment.js 相同的 API 和用法</li>
<li>💪 不可变数据 (Immutable)</li>
<li>🔥 支持链式操作 (Chainable)</li>
<li>🌐 国际化 I18n</li>
<li>📦 仅 2kb 大小的微型库</li>
<li>👫 全浏览器兼容</li>
</ul>
<hr>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line">npm install dayjs --save</span><br></pre></td></tr></tbody></table></figure>

<p>📚<a href="./Installation.md">安装指南</a></p>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>Day.js 有很多 API 来解析、处理、校验、增减、展示时间和日期</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">dayjs</span>(<span class="string">"2018-08-08"</span>); <span class="comment">// 解析</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">dayjs</span>().<span class="title function_">format</span>(<span class="string">"{YYYY} MM-DDTHH:mm:ss SSS [Z] A"</span>); <span class="comment">// 展示</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">dayjs</span>()</span><br><span class="line">  .<span class="title function_">set</span>(<span class="string">"month"</span>, <span class="number">3</span>)</span><br><span class="line">  .<span class="title function_">month</span>(); <span class="comment">// 获取</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">dayjs</span>().<span class="title function_">add</span>(<span class="number">1</span>, <span class="string">"year"</span>); <span class="comment">// 处理</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">dayjs</span>().<span class="title function_">isBefore</span>(<span class="title function_">dayjs</span>()); <span class="comment">// 查询</span></span><br></pre></td></tr></tbody></table></figure>

<p>📚<a href="./API-reference.md">API 参考</a></p>
<h3 id="国际化-I18n"><a href="#国际化-I18n" class="headerlink" title="国际化 I18n"></a>国际化 I18n</h3><p>Day.js 支持国际化</p>
<p>但除非手动加载，多国语言默认是不会被打包到工程里的</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"dayjs/locale/es"</span>; <span class="comment">// 按需加载</span></span><br><span class="line"></span><br><span class="line">dayjs.<span class="title function_">locale</span>(<span class="string">"es"</span>); <span class="comment">// 全局使用西班牙语</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">dayjs</span>(<span class="string">"2018-05-05"</span>)</span><br><span class="line">  .<span class="title function_">locale</span>(<span class="string">"zh-cn"</span>)</span><br><span class="line">  .<span class="title function_">format</span>(); <span class="comment">// 在这个实例上使用简体中文</span></span><br></pre></td></tr></tbody></table></figure>

<p>📚<a href="./I18n.md">国际化 I18n</a></p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> advancedFormat <span class="keyword">from</span> <span class="string">"dayjs/plugin/advancedFormat"</span>; <span class="comment">// 按需加载插件</span></span><br><span class="line"></span><br><span class="line">dayjs.<span class="title function_">extend</span>(advancedFormat); <span class="comment">// 使用插件</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">dayjs</span>().<span class="title function_">format</span>(<span class="string">"Q Do k kk X x"</span>); <span class="comment">// 使用扩展后的API</span></span><br></pre></td></tr></tbody></table></figure>

<p>📚<a href="./Plugin.md">插件列表</a></p>
<h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h2><p>Day.js 遵循 <a href="../../LICENSE">MIT 开源协议</a>.</p>
</body></html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>JS时间处理</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6语法（一）</title>
    <url>//2019/03/25/ES6%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<html><head></head><body><p>学习 ES6 语法笔记</p>
<span id="more"></span>
<h4 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h4><h5 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h5><h6 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h6><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>
<p>以前，为变量赋值，只能直接指定值。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure>

<p>ES6 允许写成下面这样。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></tbody></table></figure>

<p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p>
<p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]]</span><br><span class="line">foo <span class="comment">// 1</span></span><br><span class="line">bar <span class="comment">// 2</span></span><br><span class="line">baz <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [, , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>]</span><br><span class="line">third <span class="comment">// "baz"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">"a"</span>]</span><br><span class="line">x <span class="comment">// "a"</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// []</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果解构不成功，变量的值就等于<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo] = []</span><br><span class="line"><span class="keyword">let</span> [bar, foo] = [<span class="number">1</span>]</span><br></pre></td></tr></tbody></table></figure>

<p>以上两种情况都属于解构不成功，<code>foo</code>的值都会等于<code>undefined</code>。</p>
<p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>]</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">d <span class="comment">// 4</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面两个例子，都属于不完全解构，但是可以成功。</p>
<p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="title class_">NaN</span></span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> [foo] = {}</span><br></pre></td></tr></tbody></table></figure>

<p>上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</p>
<p>对于 Set 结构，也可以使用数组的解构赋值。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y, z] = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>])</span><br><span class="line">x <span class="comment">// "a"</span></span><br></pre></td></tr></tbody></table></figure>

<p>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">fibs</span>(<span class="params"></span>) {</span><br><span class="line">	<span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line">	<span class="keyword">let</span> b = <span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">		<span class="keyword">yield</span> a</span><br><span class="line">		;[a, b] = [b, a + b]</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [first, second, third, fourth, fifth, sixth] = <span class="title function_">fibs</span>()</span><br><span class="line">sixth <span class="comment">// 5</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码中，<code>fibs</code>是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。</p>
<h6 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h6><p>解构赋值允许指定默认值。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo = <span class="literal">true</span>] = []</span><br><span class="line">foo <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">"b"</span>] = [<span class="string">"a"</span>] <span class="comment">// x='a', y='b'</span></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">"b"</span>] = [<span class="string">"a"</span>, <span class="literal">undefined</span>] <span class="comment">// x='a', y='b'</span></span><br></pre></td></tr></tbody></table></figure>

<p>注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，只有当一个数组成员严格等于<code>undefined</code>，默认值才会生效。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">undefined</span>]</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">null</span>]</span><br><span class="line">x <span class="comment">// null</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码中，如果一个数组成员是<code>null</code>，默认值就不会生效，因为<code>null</code>不严格等于<code>undefined</code>。</p>
<p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) {</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"aaa"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x = <span class="title function_">f</span>()] = [<span class="number">1</span>]</span><br></pre></td></tr></tbody></table></figure>

<p>上面代码中，因为<code>x</code>能取到值，所以函数<code>f</code>根本不会执行。上面的代码其实等价于下面的代码。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x</span><br><span class="line"><span class="keyword">if</span> ([<span class="number">1</span>][<span class="number">0</span>] === <span class="literal">undefined</span>) {</span><br><span class="line">	x = <span class="title function_">f</span>()</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">	x = [<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [] <span class="comment">// x=1; y=1</span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [<span class="number">2</span>] <span class="comment">// x=2; y=2</span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [<span class="number">1</span>, <span class="number">2</span>] <span class="comment">// x=1; y=2</span></span><br><span class="line"><span class="keyword">let</span> [x = y, y = <span class="number">1</span>] = [] <span class="comment">// ReferenceError: y is not defined</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面最后一个表达式之所以会报错，是因为<code>x</code>用<code>y</code>做默认值时，<code>y</code>还没有声明。</p>
<h5 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h5><p>解构不仅可以用于数组，还可以用于对象。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> { foo, bar } = { <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> }</span><br><span class="line">foo <span class="comment">// "aaa"</span></span><br><span class="line">bar <span class="comment">// "bbb"</span></span><br></pre></td></tr></tbody></table></figure>

<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> { bar, foo } = { <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> }</span><br><span class="line">foo <span class="comment">// "aaa"</span></span><br><span class="line">bar <span class="comment">// "bbb"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> { baz } = { <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> }</span><br><span class="line">baz <span class="comment">// undefined</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于<code>undefined</code>。</p>
<p>如果变量名与属性名不一致，必须写成下面这样。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> { <span class="attr">foo</span>: baz } = { <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> }</span><br><span class="line">baz <span class="comment">// "aaa"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = { <span class="attr">first</span>: <span class="string">"hello"</span>, <span class="attr">last</span>: <span class="string">"world"</span> }</span><br><span class="line"><span class="keyword">let</span> { <span class="attr">first</span>: f, <span class="attr">last</span>: l } = obj</span><br><span class="line">f <span class="comment">// 'hello'</span></span><br><span class="line">l <span class="comment">// 'world'</span></span><br></pre></td></tr></tbody></table></figure>

<p>这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> { <span class="attr">foo</span>: foo, <span class="attr">bar</span>: bar } = { <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> }</span><br></pre></td></tr></tbody></table></figure>

<p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> { <span class="attr">foo</span>: baz } = { <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> }</span><br><span class="line">baz <span class="comment">// "aaa"</span></span><br><span class="line">foo <span class="comment">// error: foo is not defined</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码中，<code>foo</code>是匹配的模式，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是模式<code>foo</code>。</p>
<p>与数组一样，解构也可以用于嵌套结构的对象。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = {</span><br><span class="line">	<span class="attr">p</span>: [<span class="string">"Hello"</span>, { <span class="attr">y</span>: <span class="string">"World"</span> }]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> {</span><br><span class="line">	<span class="attr">p</span>: [x, { y }]</span><br><span class="line">} = obj</span><br><span class="line">x <span class="comment">// "Hello"</span></span><br><span class="line">y <span class="comment">// "World"</span></span><br></pre></td></tr></tbody></table></figure>

<p>注意，这时<code>p</code>是模式，不是变量，因此不会被赋值。如果<code>p</code>也要作为变量赋值，可以写成下面这样。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = {</span><br><span class="line">	<span class="attr">p</span>: [<span class="string">"Hello"</span>, { <span class="attr">y</span>: <span class="string">"World"</span> }]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> {</span><br><span class="line">	p,</span><br><span class="line">	<span class="attr">p</span>: [x, { y }]</span><br><span class="line">} = obj</span><br><span class="line">x <span class="comment">// "Hello"</span></span><br><span class="line">y <span class="comment">// "World"</span></span><br><span class="line">p <span class="comment">// ["Hello", {y: "World"}]</span></span><br></pre></td></tr></tbody></table></figure>

<p>下面是另一个例子。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> node = {</span><br><span class="line">	<span class="attr">loc</span>: {</span><br><span class="line">		<span class="attr">start</span>: {</span><br><span class="line">			<span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line">			<span class="attr">column</span>: <span class="number">5</span></span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> {</span><br><span class="line">	loc,</span><br><span class="line">	<span class="attr">loc</span>: { start },</span><br><span class="line">	<span class="attr">loc</span>: {</span><br><span class="line">		<span class="attr">start</span>: { line }</span><br><span class="line">	}</span><br><span class="line">} = node</span><br><span class="line">line <span class="comment">// 1</span></span><br><span class="line">loc <span class="comment">// Object {start: Object}</span></span><br><span class="line">start <span class="comment">// Object {line: 1, column: 5}</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码有三次解构赋值，分别是对<code>loc</code>、<code>start</code>、<code>line</code>三个属性的解构赋值。注意，最后一次对<code>line</code>属性的解构赋值之中，只有<code>line</code>是变量，<code>loc</code>和<code>start</code>都是模式，不是变量。</p>
<p>下面是嵌套赋值的例子。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = {}</span><br><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"></span><br><span class="line">;({ <span class="attr">foo</span>: obj.<span class="property">prop</span>, <span class="attr">bar</span>: arr[<span class="number">0</span>] } = { <span class="attr">foo</span>: <span class="number">123</span>, <span class="attr">bar</span>: <span class="literal">true</span> })</span><br><span class="line"></span><br><span class="line">obj <span class="comment">// {prop:123}</span></span><br><span class="line">arr <span class="comment">// [true]</span></span><br></pre></td></tr></tbody></table></figure>

<p>对象的解构也可以指定默认值。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> { x = <span class="number">3</span> } = {}</span><br><span class="line">x <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> { x, y = <span class="number">5</span> } = { <span class="attr">x</span>: <span class="number">1</span> }</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> { <span class="attr">x</span>: y = <span class="number">3</span> } = {}</span><br><span class="line">y <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> { <span class="attr">x</span>: y = <span class="number">3</span> } = { <span class="attr">x</span>: <span class="number">5</span> }</span><br><span class="line">y <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> { <span class="attr">message</span>: msg = <span class="string">"Something went wrong"</span> } = {}</span><br><span class="line">msg <span class="comment">// "Something went wrong"</span></span><br></pre></td></tr></tbody></table></figure>

<p>默认值生效的条件是，对象的属性值严格等于<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> { x = <span class="number">3</span> } = { <span class="attr">x</span>: <span class="literal">undefined</span> }</span><br><span class="line">x <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> { x = <span class="number">3</span> } = { <span class="attr">x</span>: <span class="literal">null</span> }</span><br><span class="line">x <span class="comment">// null</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码中，属性<code>x</code>等于<code>null</code>，因为<code>null</code>与<code>undefined</code>不严格相等，所以是个有效的赋值，导致默认值<code>3</code>不会生效。</p>
<p>如果解构失败，变量的值等于<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> { foo } = { <span class="attr">bar</span>: <span class="string">"baz"</span> }</span><br><span class="line">foo <span class="comment">// undefined</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> {</span><br><span class="line">	<span class="attr">foo</span>: { bar }</span><br><span class="line">} = { <span class="attr">baz</span>: <span class="string">"baz"</span> }</span><br></pre></td></tr></tbody></table></figure>

<p>上面代码中，等号左边对象的<code>foo</code>属性，对应一个子对象。该子对象的<code>bar</code>属性，解构时会报错。原因很简单，因为<code>foo</code>这时等于<code>undefined</code>，再取子属性就会报错，请看下面的代码。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _tmp = { <span class="attr">baz</span>: <span class="string">"baz"</span> }</span><br><span class="line">_tmp.<span class="property">foo</span>.<span class="property">bar</span> <span class="comment">// 报错</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">{x} = {<span class="attr">x</span>: <span class="number">1</span>};</span><br><span class="line"><span class="comment">// SyntaxError: syntax error</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码的写法会报错，因为 JavaScript 引擎会将<code>{x}</code>理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">let</span> x</span><br><span class="line">;({ x } = { <span class="attr">x</span>: <span class="number">1</span> })</span><br></pre></td></tr></tbody></table></figure>

<p>上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。</p>
<p>解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">;({} = [<span class="literal">true</span>, <span class="literal">false</span>])</span><br><span class="line">;({} = <span class="string">"abc"</span>)</span><br><span class="line">;({} = [])</span><br></pre></td></tr></tbody></table></figure>

<p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p>
<p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> { log, sin, cos } = <span class="title class_">Math</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码将<code>Math</code>对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。</p>
<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> { <span class="number">0</span>: first, [arr.<span class="property">length</span> - <span class="number">1</span>]: last } = arr</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">last <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码对数组进行对象解构。数组<code>arr</code>的<code>0</code>键对应的值是<code>1</code>，<code>[arr.length - 1]</code>就是<code>2</code>键，对应的值是<code>3</code>。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。</p>
<h5 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h5><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">"hello"</span></span><br><span class="line">a <span class="comment">// "h"</span></span><br><span class="line">b <span class="comment">// "e"</span></span><br><span class="line">c <span class="comment">// "l"</span></span><br><span class="line">d <span class="comment">// "l"</span></span><br><span class="line">e <span class="comment">// "o"</span></span><br></pre></td></tr></tbody></table></figure>

<p>类似数组的对象都有一个<code>length</code>属性，因此还可以对这个属性解构赋值。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> { <span class="attr">length</span>: len } = <span class="string">"hello"</span></span><br><span class="line">len <span class="comment">// 5</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h5><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> { <span class="attr">toString</span>: s } = <span class="number">123</span></span><br><span class="line">s === <span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> { <span class="attr">toString</span>: s } = <span class="literal">true</span></span><br><span class="line">s === <span class="title class_">Boolean</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码中，数值和布尔值的包装对象都有<code>toString</code>属性，因此变量<code>s</code>都能取到值。</p>
<p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> { <span class="attr">prop</span>: x } = <span class="literal">undefined</span> <span class="comment">// TypeError</span></span><br><span class="line"><span class="keyword">let</span> { <span class="attr">prop</span>: y } = <span class="literal">null</span> <span class="comment">// TypeError</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h5><p>函数的参数也可以使用解构赋值。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">[x, y]</span>) {</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>([<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码中，函数<code>add</code>的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量<code>x</code>和<code>y</code>。对于函数内部的代码来说，它们能感受到的参数就是<code>x</code>和<code>y</code>。</p>
<p>下面是另一个例子。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">;[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]].<span class="title function_">map</span>(<span class="function">(<span class="params">[a, b]</span>) =&gt;</span> a + b)</span><br><span class="line"><span class="comment">// [ 3, 7 ]</span></span><br></pre></td></tr></tbody></table></figure>

<p>函数参数的解构也可以使用默认值。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">{ x = <span class="number">0</span>, y = <span class="number">0</span> } = {}</span>) {</span><br><span class="line">	<span class="keyword">return</span> [x, y]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">move</span>({ <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span> }) <span class="comment">// [3, 8]</span></span><br><span class="line"><span class="title function_">move</span>({ <span class="attr">x</span>: <span class="number">3</span> }) <span class="comment">// [3, 0]</span></span><br><span class="line"><span class="title function_">move</span>({}) <span class="comment">// [0, 0]</span></span><br><span class="line"><span class="title function_">move</span>() <span class="comment">// [0, 0]</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码中，函数<code>move</code>的参数是一个对象，通过对这个对象进行解构，得到变量<code>x</code>和<code>y</code>的值。如果解构失败，<code>x</code>和<code>y</code>等于默认值。</p>
<p>注意，下面的写法会得到不一样的结果。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">{ x, y } = { x: <span class="number">0</span>, y: <span class="number">0</span> }</span>) {</span><br><span class="line">	<span class="keyword">return</span> [x, y]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">move</span>({ <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span> }) <span class="comment">// [3, 8]</span></span><br><span class="line"><span class="title function_">move</span>({ <span class="attr">x</span>: <span class="number">3</span> }) <span class="comment">// [3, undefined]</span></span><br><span class="line"><span class="title function_">move</span>({}) <span class="comment">// [undefined, undefined]</span></span><br><span class="line"><span class="title function_">move</span>() <span class="comment">// [0, 0]</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码是为函数<code>move</code>的参数指定默认值，而不是为变量<code>x</code>和<code>y</code>指定默认值，所以会得到与前一种写法不同的结果。</p>
<p><code>undefined</code>就会触发函数参数的默认值。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">;[<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">x = <span class="string">"yes"</span></span>) =&gt;</span> x)</span><br><span class="line"><span class="comment">// [ 1, 'yes', 3 ]</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="圆括号问题"><a href="#圆括号问题" class="headerlink" title="圆括号问题"></a>圆括号问题</h5><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>
<p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>
<p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>
<h6 id="不能使用圆括号的情况"><a href="#不能使用圆括号的情况" class="headerlink" title="不能使用圆括号的情况"></a>不能使用圆括号的情况</h6><p>以下三种解构赋值不得使用圆括号。</p>
<p>（1）变量声明语句</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 全部报错</span></span><br><span class="line"><span class="keyword">let</span> [(a)] = [<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> {<span class="attr">x</span>: (c)} = {};</span><br><span class="line"><span class="title function_">let</span> ({<span class="attr">x</span>: c}) = {};</span><br><span class="line"><span class="keyword">let</span> {(<span class="attr">x</span>: c)} = {};</span><br><span class="line"><span class="keyword">let</span> {(x): c} = {};</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> { <span class="attr">o</span>: ({ <span class="attr">p</span>: p }) } = { <span class="attr">o</span>: { <span class="attr">p</span>: <span class="number">2</span> } };</span><br></pre></td></tr></tbody></table></figure>

<p>上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。</p>
<p>（2）函数参数</p>
<p>函数参数也属于变量声明，因此不能带有圆括号。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">[(z)]</span>) { <span class="keyword">return</span> z; }</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">[z,(x)]</span>) { <span class="keyword">return</span> x; }</span><br></pre></td></tr></tbody></table></figure>

<p>（3）赋值语句的模式</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 全部报错</span></span><br><span class="line">({ <span class="attr">p</span>: a }) = { <span class="attr">p</span>: <span class="number">42</span> };</span><br><span class="line">([a]) = [<span class="number">5</span>];</span><br></pre></td></tr></tbody></table></figure>

<p>上面代码将整个模式放在圆括号之中，导致报错。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line">;[{ <span class="attr">p</span>: a }, { <span class="attr">x</span>: c }] = [{}, {}]</span><br></pre></td></tr></tbody></table></figure>

<p>上面代码将一部分模式放在圆括号之中，导致报错。</p>
<h5 id="可以使用圆括号的情况"><a href="#可以使用圆括号的情况" class="headerlink" title="可以使用圆括号的情况"></a>可以使用圆括号的情况</h5><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">;[b] = [<span class="number">3</span>] <span class="comment">// 正确</span></span><br><span class="line">;({ <span class="attr">p</span>: d } = {}) <span class="comment">// 正确</span></span><br><span class="line">;[<span class="built_in">parseInt</span>.<span class="property">prop</span>] = [<span class="number">3</span>] <span class="comment">// 正确</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是<code>p</code>，而不是<code>d</code>；第三行语句与第一行语句的性质一致。</p>
<h5 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h5><p>变量的解构赋值用途很多。</p>
<p><strong>（1）交换变量的值</strong></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">;[x, y] = [y, x]</span><br></pre></td></tr></tbody></table></figure>

<p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>
<p><strong>（2）从函数返回多个值</strong></p>
<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 返回一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) {</span><br><span class="line">	<span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = <span class="title function_">example</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) {</span><br><span class="line">	<span class="keyword">return</span> {</span><br><span class="line">		<span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">		<span class="attr">bar</span>: <span class="number">2</span></span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> { foo, bar } = <span class="title function_">example</span>()</span><br></pre></td></tr></tbody></table></figure>

<p><strong>（3）函数参数的定义</strong></p>
<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 参数是一组有次序的值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">[x, y, z]</span>) { ... }</span><br><span class="line"><span class="title function_">f</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是一组无次序的值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">{x, y, z}</span>) { ... }</span><br><span class="line"><span class="title function_">f</span>({<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>});</span><br></pre></td></tr></tbody></table></figure>

<p><strong>（4）提取 JSON 数据</strong></p>
<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonData = {</span><br><span class="line">	<span class="attr">id</span>: <span class="number">42</span>,</span><br><span class="line">	<span class="attr">status</span>: <span class="string">"OK"</span>,</span><br><span class="line">	<span class="attr">data</span>: [<span class="number">867</span>, <span class="number">5309</span>]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> { id, status, <span class="attr">data</span>: number } = jsonData</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id, status, number)</span><br><span class="line"><span class="comment">// 42, "OK", [867, 5309]</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码可以快速提取 JSON 数据的值。</p>
<p><strong>（5）函数参数的默认值</strong></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">jQuery.<span class="property">ajax</span> = <span class="keyword">function</span>(<span class="params"></span></span><br><span class="line"><span class="params">	url,</span></span><br><span class="line"><span class="params">	{</span></span><br><span class="line"><span class="params">		<span class="keyword">async</span> = <span class="literal">true</span>,</span></span><br><span class="line"><span class="params">		beforeSend = <span class="keyword">function</span>() {},</span></span><br><span class="line"><span class="params">		cache = <span class="literal">true</span>,</span></span><br><span class="line"><span class="params">		complete = <span class="keyword">function</span>() {},</span></span><br><span class="line"><span class="params">		crossDomain = <span class="literal">false</span>,</span></span><br><span class="line"><span class="params">		<span class="variable language_">global</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="params">		// ... more config</span></span><br><span class="line"><span class="params">	} = {}</span></span><br><span class="line"><span class="params"></span>) {</span><br><span class="line">	<span class="comment">// ... do stuff</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>指定参数的默认值，就避免了在函数体内部再写<code>var foo = config.foo || 'default foo';</code>这样的语句。</p>
<p><strong>（6）遍历 Map 结构</strong></p>
<p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">"first"</span>, <span class="string">"hello"</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">"second"</span>, <span class="string">"world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) {</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">" is "</span> + value)</span><br><span class="line">}</span><br><span class="line"><span class="comment">// first is hello</span></span><br><span class="line"><span class="comment">// second is world</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取键名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) {</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [, value] <span class="keyword">of</span> map) {</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>（7）输入模块的指定方法</strong></p>
<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> { <span class="title class_">SourceMapConsumer</span>, <span class="title class_">SourceNode</span> } = <span class="built_in">require</span>(<span class="string">"source-map"</span>)</span><br></pre></td></tr></tbody></table></figure>

<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul>
<li><span class="exturl" data-url="aHR0cDovL2VzNi5ydWFueWlmZW5nLmNvbS8jZG9jcw==">《ECMAScript 6 入门》<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</body></html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>ES6语法</tag>
      </tags>
  </entry>
  <entry>
    <title>H5与Native的通信方式 &quot;JSBridge&quot;</title>
    <url>//2021/12/04/H5%E4%B8%8ENative%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>导读</p>
</blockquote>
<p>写这篇的博客起因是由于公司app的H5 Hybrid项目引发的本文的撰写！由于公司内部JSBridge方案有些庞大，并且端上开发人力紧张等这些客观因素，简单的基于js2native的原理实现了一版简陋版JSBridge SDK，不妥之处还请大家批评指正！！！</p>
<span id="more"></span>

<h3 id="JSBridge起源"><a href="#JSBridge起源" class="headerlink" title="JSBridge起源"></a>JSBridge起源</h3><p>首先我们讲下Bridge 的起源。JSBridge 是一种 JS 实现的 Bridge，连接着桥两端的 Native 和 H5。它在 APP 内方便地让 Native 调用 JS，JS 调用 Native ，是双向通信的通道。JSBridge 主要提供了 JS 调用 Native 代码的能力，实现原生功能如查看本地相册、打开摄像头、指纹支付等。</p>
<h3 id="JSBridge-的双向通信原理"><a href="#JSBridge-的双向通信原理" class="headerlink" title="JSBridge 的双向通信原理"></a>JSBridge 的双向通信原理</h3><h4 id="JS调用Native"><a href="#JS调用Native" class="headerlink" title="JS调用Native"></a>JS调用Native</h4><blockquote>
<p>JS 调用 Native 的实现方式较多，目前主流采用是拦截URL Scheme 、重写prompt 、注入API方法。</p>
</blockquote>
<p>基于我们的业务需求，我们仅需在鸿蒙平台下使用JSBridge，所以我们采用了拦截URL Scheme来实现，今天我们的分享也主要以这个为主！</p>
<blockquote>
<p>URL Scheme</p>
</blockquote>
<p>web端采用创建隐藏的iframe进行scheme请求，端上采用拦截协议上的参数实现调用对应的native方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 判断协议</span></span><br><span class="line"><span class="type">String</span> <span class="variable">urlScheme</span> <span class="operator">=</span> <span class="string">"xxx"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">callBackID</span> <span class="operator">=</span> <span class="string">"xxx"</span>;<span class="comment">// 从url中解析的callBackID</span></span><br><span class="line"><span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">"xxx"</span>; <span class="comment">// 对象字符串</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(urlScheme == <span class="string">'xxx'</span>) {</span><br><span class="line">    webview.executeJs(<span class="string">"javascript:window.CallJSBridge( ,"</span> + isSuccess <span class="string">","</span> + data + <span class="string">","</span> + <span class="string">")"</span>, <span class="keyword">new</span> <span class="title class_">AsyncCallback</span>&lt;String&gt;() {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(String msg)</span> {</span><br><span class="line">      <span class="comment">// 在此确认返回结果</span></span><br><span class="line">    }</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>通过创建iframe请求URL Scheme</li>
</ul>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">createIframeRequest</span>(<span class="params"><span class="attr">url</span>: <span class="built_in">string</span></span>) {</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">if</span> (!iframeNode) {</span><br><span class="line">      iframeNode = <span class="title function_">documentcreateElement</span>(<span class="string">"iframe"</span>);</span><br><span class="line">      iframeNode.<span class="property">style</span>.<span class="property">display</span> = <span class="string">"none"</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">appendChild</span>(iframeNode);</span><br><span class="line">      <span class="comment">// ??是否需要删除</span></span><br><span class="line">      <span class="keyword">let</span> <span class="attr">timerRemoveIframe</span>: <span class="title class_">NodeJS</span>.<span class="property">Timeout</span> | <span class="literal">null</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">removeChild</span>(</span><br><span class="line">          iframeNode <span class="keyword">as</span> <span class="title class_">HTMLIFrameElement</span></span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timerRemoveIframe <span class="keyword">as</span> <span class="title class_">NodeJS</span>.<span class="property">Timeout</span>);</span><br><span class="line">        timerRemoveIframe = <span class="literal">null</span>;</span><br><span class="line">      }, <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 修改url</span></span><br><span class="line">    iframeNode.<span class="property">src</span> = url;</span><br><span class="line">  } <span class="keyword">catch</span> (error) {</span><br><span class="line">   <span class="comment">// 触发异常监控</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 调用方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">event</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">data</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">invoke</span>(<span class="params"><span class="attr">event</span>: <span class="built_in">string</span>, data?: <span class="built_in">any</span></span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isBridgeReady</span>) {</span><br><span class="line">        <span class="title function_">reject</span>();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">"Bridge not ready!"</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">// 生成随机id</span></span><br><span class="line">      <span class="keyword">const</span> <span class="attr">callback</span>: <span class="built_in">string</span> = <span class="title function_">nanoid</span>();</span><br><span class="line">      <span class="keyword">const</span> dataObj = {</span><br><span class="line">        event,</span><br><span class="line">        callback,</span><br><span class="line">      };</span><br><span class="line">      <span class="keyword">const</span> url = <span class="string">`<span class="subst">${<span class="variable language_">this</span>.baseSchema}</span>?<span class="subst">${qs.stringify(dataObj)}</span>`</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 向window上注册变量方法</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">callbackObj</span>[callback] = {</span><br><span class="line">        url,</span><br><span class="line">        <span class="attr">call_time</span>: +<span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">        <span class="title function_">success</span>(<span class="params">data</span>) {</span><br><span class="line">          <span class="title function_">resolve</span>(data);</span><br><span class="line">        },</span><br><span class="line">        <span class="title function_">error</span>(<span class="params">error</span>) {</span><br><span class="line">          <span class="title function_">reject</span>(error);</span><br><span class="line">        },</span><br><span class="line">      };</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 请求</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">createIframeRequest</span>(url);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="comment">// 支持使用addJs</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">__BridgeHandler</span> &amp;&amp;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">__BridgeHandler</span>.<span class="property">call</span></span><br><span class="line">        ) {</span><br><span class="line">          <span class="keyword">let</span> {</span><br><span class="line">            callback,</span><br><span class="line">            isSuccess,</span><br><span class="line">            <span class="attr">data</span>: res,</span><br><span class="line">          } = <span class="variable language_">window</span>.<span class="property">__BridgeHandler</span>.<span class="title function_">call</span>(</span><br><span class="line">            <span class="title class_">JSON</span>.<span class="title function_">stringify</span>({</span><br><span class="line">              event,</span><br><span class="line">              data,</span><br><span class="line">              <span class="attr">call_time</span>: +<span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">            })</span><br><span class="line">          );</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(res) === <span class="string">"[object Object]"</span>) {</span><br><span class="line">            res = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res);</span><br><span class="line">          }</span><br><span class="line">          <span class="comment">// 调用</span></span><br><span class="line">          <span class="title class_">CallJSBridge</span>(callback, isSuccess, res);</span><br><span class="line">        }</span><br><span class="line">      }, <span class="number">0</span>);</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>web同学在一进入页面前注入向window中注入代码</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CallJSBridge</span>(<span class="params">callback, isSuccess, data</span>) {</span><br><span class="line">  <span class="comment">// 调用window上的callback对象</span></span><br><span class="line">  <span class="keyword">var</span> handler = <span class="variable language_">window</span>.<span class="property">callbackObj</span>[callback]</span><br><span class="line">  <span class="keyword">if</span>(handler) {</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">"handler error"</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    isSuccess &amp;&amp; handler.<span class="property">success</span> &amp;&amp; handler.<span class="title function_">success</span>(data)</span><br><span class="line">    !isSuccess &amp;&amp; handler.<span class="property">error</span> &amp;&amp; handler.<span class="title function_">error</span>(data)</span><br><span class="line">  } <span class="keyword">catch</span>(error) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Native调用JS"><a href="#Native调用JS" class="headerlink" title="Native调用JS"></a>Native调用JS</h4><p>Native 调用 JS 比较简单，只要 H5 将 JS 方法暴露在 Window 上给 Native 调用即可。</p>
<p>Android 和 鸿蒙OS 中主要有两种方式实现。在 4.4 以前，通过 loadUrl 方法，执行一段 JS 代码来实现。在 4.4 以后，可以使用 evaluateJavascript 方法实现。loadUrl 方法使用起来方便简洁，但是效率低无法获得返回结果且调用的时候会刷新 WebView 。evaluateJavascript 方法效率高获取返回值方便，调用时候不刷新 WebView，但是只支持 Android 4.4+。相关代码如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 4.4 之前</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">webView.loadUrl(<span class="string">"javascript:"</span> + javaScriptString);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 4.4 之后</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">webView.evaluateJavascript(javaScriptString, <span class="keyword">new</span> <span class="title class_">ValueCallback</span>&lt;String&gt;() {</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceiveValue</span><span class="params">(String value)</span>{</span><br><span class="line">    xxx</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<h3 id="文档参考"><a href="#文档参考" class="headerlink" title="文档参考"></a>文档参考</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuem9vLnRlYW0vYXJ0aWNsZS9qc2JyaWRnZQ==">小白必看，JSBridge 初探<i class="fa fa-external-link-alt"></i></span> 感谢作者</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>hybrid 混合式开发</tag>
        <tag>JSBridge</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript模块化语法总结</title>
    <url>//2017/12/29/JavaScript-modules/</url>
    <content><![CDATA[<html><head></head><body><h1 id="CommonJS-服务端模块化规范"><a href="#CommonJS-服务端模块化规范" class="headerlink" title="CommonJS 服务端模块化规范"></a>CommonJS 服务端模块化规范</h1><h1 id="AMD-CMD-浏览器（客户端）模块化规范"><a href="#AMD-CMD-浏览器（客户端）模块化规范" class="headerlink" title="AMD/CMD 浏览器（客户端）模块化规范"></a>AMD/CMD 浏览器（客户端）模块化规范</h1><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">"math"</span>);</span><br><span class="line"></span><br><span class="line">math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<p>第二行 math.add(2, 3)，在第一行 require(‘math’)之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>
<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。</p>
<p>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是 AMD 规范诞生的背景。</p>
<h3 id="AMD-规范的模块化插件（require-js-和-curl-js）"><a href="#AMD-规范的模块化插件（require-js-和-curl-js）" class="headerlink" title="AMD 规范的模块化插件（require.js 和 curl.js）"></a>AMD 规范的模块化插件（require.js 和 curl.js）</h3><p>使用的是 require 导入模块</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>, <span class="string">'underscore'</span>, <span class="string">'backbone'</span>], <span class="keyword">function</span> (<span class="params">$, _, Backbone</span>){</span><br><span class="line"></span><br><span class="line">　　　　<span class="comment">// some code here</span></span><br><span class="line"></span><br><span class="line">　　});</span><br><span class="line"><span class="built_in">require</span>会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//指定路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>.<span class="title function_">config</span>({</span><br><span class="line">       <span class="attr">baseUrl</span>:<span class="string">'js/lib'</span>,<span class="comment">//放置公共路径</span></span><br><span class="line">　　　　<span class="attr">paths</span>: {</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="string">"jquery"</span>: <span class="string">"jquery.min"</span>,</span><br><span class="line">　　　　　　<span class="string">"underscore"</span>: <span class="string">"underscore.min"</span>,</span><br><span class="line">　　　　　　<span class="string">"backbone"</span>: <span class="string">"backbone.min"</span></span><br><span class="line"></span><br><span class="line">　　　　}</span><br><span class="line"></span><br><span class="line">　　});</span><br></pre></td></tr></tbody></table></figure>

<h3 id="AMD-模块规范写法"><a href="#AMD-模块规范写法" class="headerlink" title="AMD 模块规范写法"></a>AMD 模块规范写法</h3><ul>
<li>五、AMD 模块的写法</li>
</ul>
<p>require.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。</p>
<p>具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在<code>define()</code>函数之中。</p>
<p>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">var</span> add = <span class="keyword">function</span>(<span class="params">x, y</span>) {</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">add</span>: add</span><br><span class="line">  };</span><br><span class="line">}); <span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载方法如下：</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">"math"</span>], <span class="keyword">function</span>(<span class="params">math</span>) {</span><br><span class="line">  <span class="title function_">alert</span>(math.<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>模块化</tag>
        <tag>规范</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>ES5, ES6, ES2016, ES.Next: JavaScript的版本是怎么回事？「译」</title>
    <url>//2015/09/22/JavaScript%E7%9A%84%E7%89%88%E6%9C%AC%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B/</url>
    <content><![CDATA[<html><head></head><body><p>JavaScript 有着很奇怪的命名史。</p>
<p>1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript <em>（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）</em></p>
<span id="more"></span>
<p><img data-src="/assets/img/2015/09/javascript-java.jpg" alt="java-javascript"><br><small class="img-hint">歪果仁的笑话怎么一点都不好笑</small></p>
<blockquote>
<p>译者注：<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSmF2YVNjcmlwdCNIaXN0b3J5">wikipedia 的 JavaScript 词条<i class="fa fa-external-link-alt"></i></span> 更详细的叙述了这段历史</p>
</blockquote>
<p>1996 年，网景将 JavaScript 提交给 <span class="exturl" data-url="aHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnLw==">ECMA International（欧洲计算机制造商协会）<i class="fa fa-external-link-alt"></i></span> 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。</p>
<blockquote>
<p>术语（译者注）：</p>
<ul>
<li>_标准（Standard）_： 用于定义与其他事物区别的一套规则</li>
<li>_实现（Implementation）_： 某个标准的具体实施/真实实践</li>
</ul>
</blockquote>
<p>不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。</p>
<blockquote>
<p>译者注：<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRUNNQVNjcmlwdCM0dGhfRWRpdGlvbl8uMjhhYmFuZG9uZWQuMjk=">ECMAScript 第四版草案<i class="fa fa-external-link-alt"></i></span>由于太过激进而被抛弃，Adobe 的 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQWN0aW9uU2NyaXB0">ActionScript 3.0<i class="fa fa-external-link-alt"></i></span> 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）</p>
</blockquote>
<p>到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）</p>
<p>目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d5Y2F0cy9qYXZhc2NyaXB0LWRlY29yYXRvcnM=">decorators（装饰者）<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2x1a2Vob2Jhbi9lY21hc2NyaXB0LWFzeW5jYXdhaXQ=">async-await（async-await 异步编程模型）<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plZmZtby9lcy1jbGFzcy1wcm9wZXJ0aWVz">static class properties（静态类属性）<i class="fa fa-external-link-alt"></i></span>。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 <span class="exturl" data-url="aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvdXNhZ2UvZXhwZXJpbWVudGFsLw==">Babel 的官网<i class="fa fa-external-link-alt"></i></span> 上查看各个提案目前都在哪个阶段了。</p>
<p>所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：</p>
<ul>
<li><strong>ECMAScript</strong>：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。</li>
<li><strong>JavaScript</strong>：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。</li>
<li>**ECMAScript 5 (ES5)**：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</li>
<li>**ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)**：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅<span class="exturl" data-url="aHR0cDovL2thbmdheC5naXRodWIuaW8vY29tcGF0LXRhYmxlL2VzNi8=">这张兼容性表<i class="fa fa-external-link-alt"></i></span>来查看不同浏览器和工具的实现情况。</li>
<li><strong>ECMAScript 2016</strong>：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定</li>
<li><strong>ECMAScript Proposals</strong>：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。</li>
</ul>
<p>在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。</p>
<h4 id="一些资源"><a href="#一些资源" class="headerlink" title="一些资源"></a>一些资源</h4><ul>
<li>TC39 的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvZWNtYTI2Mg==">Github 仓库<i class="fa fa-external-link-alt"></i></span>上可以看到所有目前公开的提案</li>
<li>如果你还不熟悉 ES6，Babel 有一个<span class="exturl" data-url="aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvbGVhcm4tZXMyMDE1Lw==">很不错的特性概览<i class="fa fa-external-link-alt"></i></span></li>
<li>如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 <span class="exturl" data-url="aHR0cDovL2V4cGxvcmluZ2pzLmNvbS8=">Exploring ES6<i class="fa fa-external-link-alt"></i></span>和 Nicholas Zakas 的 <span class="exturl" data-url="aHR0cHM6Ly9sZWFucHViLmNvbS91bmRlcnN0YW5kaW5nZXM2">Understanding ECMAScript 6<i class="fa fa-external-link-alt"></i></span>。Axel 的博客 <span class="exturl" data-url="aHR0cDovL3d3dy4yYWxpdHkuY29tLw==">2ality<i class="fa fa-external-link-alt"></i></span> 也是很不错的 ES6 资源</li>
</ul>
<img class="shadow" width="320" data-src="/assets/img/2015/09/keep-calm-and-learn-javascript.png">
<small class="img-hint">来学 JavaScript 吧！</small>

<h4 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h4><p>本文译自 <span class="exturl" data-url="aHR0cDovL2Jlbm1jY29ybWljay5vcmcvMjAxNS8wOS8xNC9lczUtZXM2LWVzMjAxNi1lcy1uZXh0LXdoYXRzLWdvaW5nLW9uLXdpdGgtamF2YXNjcmlwdC12ZXJzaW9uaW5nLw==">ES5, ES6, ES2016, ES.Next: What’s going on with JavaScript versioning?<i class="fa fa-external-link-alt"></i></span><br>译者 <span class="exturl" data-url="aHR0cDovL3dlaWJvLmNvbS9odXhwcm8=">黄玄<i class="fa fa-external-link-alt"></i></span>，首次发布于 <span class="exturl" data-url="aHR0cDovL2h1YW5neHVhbi5tZS8=">Hux Blog<i class="fa fa-external-link-alt"></i></span>，转载请保留以上链接</p>
</body></html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM error &quot;npm Cannot read property &#39;length&#39; of undefined&quot;</title>
    <url>//2019/05/28/NPM-Error/</url>
    <content><![CDATA[<html><head></head><body><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li>出现错误版本<code>npm 6.9.0</code></li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm -g outdated</span><br><span class="line"><span class="comment"># 检测所有全局依赖包更新情况</span></span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<ul>
<li>报错显示</li>
</ul>
<p><img data-src="/assets/img/2019/05/1.jpg" alt="image"></p>
<h3 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 148行</span></span><br><span class="line"><span class="keyword">var</span> columns = [</span><br><span class="line">	depname,</span><br><span class="line">	has || <span class="string">"MISSING"</span>,</span><br><span class="line">	want,</span><br><span class="line">	latest,</span><br><span class="line">	deppath || <span class="string">"global"</span> <span class="comment">// 此处修改为这样</span></span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ucG0uY29tbXVuaXR5L3QvbnBtLW91dGRhdGVkLXRocm93LWFuLWVycm9yLWNhbm5vdC1yZWFkLXByb3BlcnR5LWxlbmd0aC1vZi11bmRlZmluZWQvNTkyOQ==">“npm-outdated-throw-an-error-cannot-read-property-length-of-undefined”<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25wbS9jbGkvY29tbWl0L2QwNzU0NzE1NGViOGE4OGFhNGZkZThhMzdlMTI4ZTFlMzI3MmFkYzEjZGlmZi0zZDIwNDk5ZDU4ZjE0YzZmMWVkZmU5M2Q4YmE4YThhMg==">“npm Cannot read property ‘length’ of undefined”<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</body></html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>NPM</tag>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH 简介</title>
    <url>//2020/04/11/SSH-%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<html><head></head><body><p>SSH(即 Secure Shell)，是一项创建在应用层和传输层基础上的安全协议，为计算机 Shell 提供安全的传输和使用环境。</p>
<p>传统的网络服务程序，如FTP、POP、Telnet等本质上并不安全；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人（man-in-the-middle）攻击方式的攻击。就是存在另一个人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。</p>
<p>而SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。通过SSH可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。</p>
<p>SSH之另一项优点为其传输的数据可以是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、POP、甚至为PPP提供一个安全的“通道”。</p>
<p>最初的 SSH 协议由芬兰一家公司的研究员Tatu Ylönen于1995年设计开发，但是由于版权和加密算法的等等的限制，很多人转而使用开源的自由软件 OpenSSH。</p>
<span id="more"></span>
<p>客户端安装 openssh-client 用以登录远程主机：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-client</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>服务端安装 openssh-server 用以提供客户端登录：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>SSH 提供了两种级别的安全认证，基于密码的安全认证和基于密钥的安全认证：</p>
<h2 id="基于密码的安全认证"><a href="#基于密码的安全认证" class="headerlink" title="基于密码的安全认证"></a>基于密码的安全认证</h2><p>基于密码的安全认证，登录的时候需要提供账号和密码；远程主机将自己的公钥分发给登录客户端，客户端访问主机使用该公钥加密；远程主机使用自己的私钥解密数据。</p>
<p>登录的流程如下：</p>
<ol>
<li>远程主机收到用户登录请求，将自己的公钥发给用户</li>
<li>用户通过远程主机公钥的指纹确认主机的真实性，然后使用远程主机公钥将登录密码加密后，发送回远程主机</li>
<li>远程主机使用自己的私钥解码登录密码，验证密码正确后，允许用户登录</li>
</ol>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>假设需要以用户名 user 登录远程主机 host：</p>
<p>如果本地用户名与远程用户名一致，可以省略用户名：</p>
<p>SSH 默认端口号22，可以使用 p 参数来指定端口号：</p>
<p>第一次登录到远程主机时，系统会出现如下提示：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ ssh user@host</span><br><span class="line">The authenticity of host 'host (***.***.***.***)' can't be established.</span><br><span class="line">RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>这段话提示用户无法确认远程主机的真实性，只知道 RSA 公钥的指纹，询问用户是否继续。</p>
<p>我们使用 ssh-keygen 工具可以生成 SSH 密钥对，其中公钥的长度可以很长，对用户来说不方便直接对比验证，因此对其进行了 MD5 计算，生成了一个128的指纹，这样再进行比较就比较容易了。</p>
<p>那么这里就要求我们事先知道远程主机的公钥指纹，才可以确认主机的真实性。</p>
<p>用户确认主机的真实性，输入 yes 继续连接：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Warning: Permanently added 'host,***.***.***.***' (RSA) to the list of known hosts.</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>然后输入密码：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Password: (enter password)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>密码正确，即可登录成功。</p>
<p>当第一次登录成功后，远程主机的公钥会被保存到文件 $HOME/.ssh/known_hosts 中，下次再连接这台主机就会跳过警告，直接提示输入密码。</p>
<p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是 /etc/ssh/ssh_known_hosts ，保存一些对所有用户都可信赖的远程主机的公钥。</p>
<h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><p>基于密码的安全认证无法避免中间人攻击：</p>
<p>网络提供者(ISP、公共 wifi 提供者等，或其它形式拦截者)，拦截用户的登录请求，用自己的公钥伪造远程主机的公钥发送给用户，然后获取用户加密后的密码，用自己的私钥解密已获取用户密码，这样用户的账号密码就被盗取了。</p>
<h2 id="基于密钥的安全认证"><a href="#基于密钥的安全认证" class="headerlink" title="基于密钥的安全认证"></a>基于密钥的安全认证</h2><p>基于密钥的安全认证，客户端将将公钥上传到服务器。登录的时候，客户端向服务器发送登录请求；服务器收到请求后，向用户发送一段随机字符串；用户用自己的私钥加密后，再发送回服务器；服务器使用事先存储的公钥进行解密，如果解密成功，证明用户可信，允许登录。</p>
<p>这种方式，在登录服务器的过程中，不需要上传密码，增加了安全性。</p>
<p>密钥的生成可参看<span class="exturl" data-url="aHR0cHM6Ly9kYWVtb24zNjkuZ2l0aHViLmlvL3NzaC8yMDE1LzAzLzA4L2dlbmVyYXRpbmctc3NoLWtleXM=" title="创建 SSH 密钥对">创建 SSH 密钥对<i class="fa fa-external-link-alt"></i></span>。</p>
<p>我们上传公钥到服务端，即将公钥内容附加到服务器用户目录下的 <em>$HOME/.ssh/authorized_keys</em> 文件中：</p>
<p>服务端首先需要安装 openssh-server 程序用以提供 ssh 登录服务，在服务器(Ubuntu 14.04 LTS)上查看服务是否打开：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ service ssh status</span><br><span class="line">ssh start/running, process 1201</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>检查 ssh 服务配置项</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>是否开启：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ cat /etc/ssh/sshd_config | grep RSAAuthentication</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">$ cat /etc/ssh/sshd_config | grep PubkeyAuthentication</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">$ cat /etc/ssh/sshd_config | grep AuthorizedKeysFile</span><br><span class="line">AuthorizedKeysFile %h/.ssh/authorized_keys</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>上传公钥：</p>
<p>重启远程主机 ssh 服务：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ ssh user@host 'service ssh restart'</span><br><span class="line"># ubuntu</span><br><span class="line"></span><br><span class="line">$ ssh user@host '/etc/init.d/ssh restart'</span><br><span class="line"># debian</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>也可以使用更复杂的命令：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ssh user@host 'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>这个命令可以清晰的看到公钥的上传过程：</p>
<ol>
<li>在远程主机用户目录下创建目录：~/.ssh</li>
<li>将本地主机文件 ~/.ssh/id_rsa.pub 拷贝到远程主机的文件 ~/.ssh/authorized_keys ，追加到文件末尾</li>
</ol>
<p>然后重启服务即可</p>
</body></html>]]></content>
      <categories>
        <category>SSH</category>
      </categories>
      <tags>
        <tag>全栈开发</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite 初探</title>
    <url>//2021/08/30/Vite-%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<html><head></head><body><p>注：转载于<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTM2ODAwNTUxMjM3NTgyODg0">前端工程化 – vite 初探<i class="fa fa-external-link-alt"></i></span></p>
<p>春节期间，尤雨溪一连串的动作宣布了vite 2.0正式发布，那么赶紧来看看这个被尤雨溪号称为下一代的前端构建工具和现在的构建工具到底有哪里不一样？</p>
<p>vite官方介绍地址: <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vdml0ZWpzLmRldi9ndWlkZS93aHkuaHRtbCUyM3Nsb3ctc2VydmVyLXN0YXJ0" title="https://vitejs.dev/guide/why.html#slow-server-start">vitejs.dev/guide/why.h…<i class="fa fa-external-link-alt"></i></span></p>
<span id="more"></span>
<p>首先我们要知道，vite为何而诞生？</p>
<h2 id="为什么需要打包工具？"><a href="#为什么需要打包工具？" class="headerlink" title="为什么需要打包工具？"></a>为什么需要打包工具？</h2><p>在前端工程化的今天，前端的技术栈越来越丰富，配套的工具也越来越多，为了提升前端的开发效率各种各样框架是层出不穷，</p>
<p>但是，随着前端项目越来越大，造成了项目依赖越来越多，而这些依赖又会有着自己的依赖，这就造成了很大的一棵依赖树，打开一个项目的node_modules目录看看，随随便便就有上百个文件夹。加上之前JavaScript 一直没有模块（module）体系，社区为此制定了一些模块加载方法，但是不同的依赖项目使用不同的加载方法。而浏览器并不支持这些加载方法，因此我们的js代码只能打包后才能在浏览器运行，因此之前的前端开发一直需要打包工具。</p>
<p>打包工具帮助我们实现了前端工程化，但是随着依赖越来越多，我们打包构建的速度越来越慢，并且开发中如果改动代码，热更新时还可以丢失当前正在进行的工作，vite就是为了解决这些问题而诞生的。</p>
<p>毫无疑问，vite最诱人的特性有以下两点：</p>
<ul>
<li>极快的冷启动速度</li>
<li>极快的热更新速度</li>
</ul>
<p>我们知道，es6中加入了模块这个特性，为的就是能有一个统一的文件加载标准，让浏览器能够根据这个标准去加载我们的代码，这样就可以提升前端开发的效率。</p>
<p>为何vite在冷启动和热更新性能上面可以比现代的构建工具更优秀？</p>
<h2 id="冷启动"><a href="#冷启动" class="headerlink" title="冷启动"></a>冷启动</h2><p>比如webpack，在我们往命令行中输入npm run命令把项目启动起来的时候，webpack需要把我们的依赖读出来，打包成一个一个浏览器可以识别的js文件，打包结束后，我们的服务器才真正可用。但是依赖是树状的，我们知道树的层级越深，遍历的开销就越大，这是造成webpack在热更新和冷启动上效率不高的主要原因。</p>
<p>我们来看看vite官网的图，webpack需要根据我们提供的文件入口去搜集依赖(由于依赖树太深，因此webpack做了很多工作希望能实现按需加载)，然后打包输出浏览器可以识别的文件，打包结束后我们的前端服务器才真正开始工作</p>
<p><img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7da53ccd112e4676a2c7db89afb40211~tplv-k3u1fbpfcp-watermark.awebp"></p>
<p>根据vite官网的图，vite是通过接受浏览器的url，来识别所需的哪些依赖，由于vite是针对es module(下文统称esm)的，es module是可以直接被浏览器识别的，因此输入命令后，项目不需要打包就可用，而且可以根据url所需的文件去返回js代码，做到了真正的按需加载。而对于非esm标准的代码，vite则是转化成esm标准的代码。 <img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3bfc28338f14f2ab6a25ba0f33c856c~tplv-k3u1fbpfcp-watermark.awebp"></p>
<p>由于webpack是把js代码打包好，当收到请求就直接返回跟浏览器(往往一个请求就可以拿到全部需要的js代码给浏览器执行，代码太多的时候则会拆分成几个文件)，而vite则是收到请求之后才去找代码，而依赖很多，可能会需要浏览器加载很多的js文件，这就可能要发很多个请求才能拿到全部的js代码，这会不会造成网络的波动？有木有可能造成页面加载的时间过长？</p>
<p>vite针对这种情况,在收到请求时做了一个叫pre-bundle的优化，也就是</p>
<ul>
<li>把非esm的js代码转换成esm代码</li>
<li>把一个依赖打成一个一个js文件返回给前端(而不是每个文件独立返回，比如lodash-es这个依赖有600多个内部模块，最终只会返回lodash-es这一个文件，里面包含了全部的内部模块)，避免网络波动，过度占用网络端口(这里会把打包的代码放在node_modules/.vite/下)</li>
<li>在请求js代码时加入了缓存信息在http请求的头部，实现浏览器缓存</li>
<li>对于monorepo，vite会把依赖的项目也一起通过esm的方式引入进来</li>
</ul>
<h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><p>热更新时，webpack由于是树状的依赖，因此其中的每一个节点改变，其祖先节点都需要重新编译加载(其实在应用中感觉开销比想象中更大)。并且由于热更新导致页面重新加载，页面上原本的状态也会丢失。（具体的原理还需要深入学习一下）</p>
<p>而vite由于基于esm，一个节点改变，大部分情况下那就只要重新请求这个节点就好了，我们知道算法中O(1)和O(n)区别还是很大的。并且vite热更新的时候，会在请求头中加入缓存的信息，服务器对于没有修改的文件返回304，极大程度的避免了不必要的重新加载</p>
<h2 id="vite的其他能力"><a href="#vite的其他能力" class="headerlink" title="vite的其他能力"></a>vite的其他能力</h2><h3 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h3><p>Vite仅执行.t 文件的转译工作，并不执行任何类型检查(请确保ts错误都已经处理完)。Vite 使用 esbuild 将 TypeScript 转译到 JavaScript，约是 tsc 速度的 20~30 倍</p>
<h3 id="ssr-ssg"><a href="#ssr-ssg" class="headerlink" title="ssr/ssg"></a>ssr/ssg</h3><p>vite的官网很明确的说vite对ssr(服务端渲染)和ssg(静态页面生成)的特性还不稳定，而且由于笔者对这两块都不怎么了解，因此暂不介绍</p>
<h3 id="sass-less"><a href="#sass-less" class="headerlink" title="sass/less"></a>sass/less</h3><p>vite支持css预处理器如less和sass，如果在css文件的后缀名中加入<code>.module</code>，vite会把css文件识别成模块，于是可以像使用对象由于使用css。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">./index.<span class="property">js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">'./style.module.scss'</span>;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">{style[</span>'<span class="attr">home__title</span>']} /&gt;</span></span></span><br><span class="line"></span><br><span class="line">./style.<span class="property">module</span>.<span class="property">scss</span></span><br><span class="line">.<span class="property">home__title</span> {</span><br><span class="line">    <span class="attr">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="预构建"><a href="#预构建" class="headerlink" title="预构建"></a>预构建</h3><p>这里主要是两个目的</p>
<ol>
<li>性能：很多依赖，比如lodash里面有600+个js文件，如果一个一个文件请求，会产生http的开销(比如不必要的http头)，所以预构建的时候会合成一个请求。</li>
</ol>
<p>2.转译cjs和UMD规范的代码。</p>
<h3 id="文件缓存"><a href="#文件缓存" class="headerlink" title="文件缓存"></a>文件缓存</h3><p>为了优化开发时的性能，vite做了两个缓存。</p>
<p>在预构建的时候，把预构建的产物存在本地文件系统，这样即使关掉电脑，下次重启也不需要重新预构建，节省了冷启动的时间。</p>
<p>在浏览器请求js文件的时候，在请求头中加上缓存信息，只要js文件没有被改动，浏览器就无须重新请求文件，节省网络请求的时间。</p>
<h2 id="vite的生产构建"><a href="#vite的生产构建" class="headerlink" title="vite的生产构建"></a>vite的生产构建</h2><p>vite目前提供的生产构建方案是通过rollup来打包发布，也就是说，现在vite的优势只能发挥在开发的时候，vite不认为基于esm的构建方式适合在生产上使用。</p>
<p>vite官网指出，esm应用到生产上个问题，那就是http请求开销问题。一个项目涉及的js文件很容易就几百上千个，用esm逐个请求的方式会带来不必要的开销。</p>
<p>那么为什么不用esbuild来打生产的包？（<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZXNidWlsZC5naXRodWIuaW8v" title="https://esbuild.github.io/">esbuild<i class="fa fa-external-link-alt"></i></span>是一个基于esm的打包根据，速度比webpack快）</p>
<p>esbuild主要是处理js和ts文件的，在css处理方面存在问题，而且esbuild在代码分割方面也不如rollup，所以打包工作还是让更成熟的rollup来承担。</p>
<h2 id="vite对比snowpack"><a href="#vite对比snowpack" class="headerlink" title="vite对比snowpack"></a>vite对比snowpack</h2><p>snowpack是早于vite的一款基于es build的构建工具，vite有有一些设计是参考了snowpack的。但是青出于蓝而胜于蓝的vite有以下的优势:</p>
<ul>
<li>支持多出口输出，换言之vite可以同时打包输出多个文件，这在做多入口页面应用时非常有意义</li>
<li>可以打包成库的模式(毕竟不是所有的工程都是为了输出html，比如vue只是为了输出vuejs)</li>
<li>自动分割css代码</li>
<li>异步块加载优化</li>
<li>对旧浏览器的兼容</li>
</ul>
<p>其中，vite的生产构建是基于rollup封装好了的，而snowpack则可以用户自己决定webpack、rollup还是其他构建工具，感觉尤玉溪是真的钟爱rollup，因为vue3也是用的这个，有机会需要学习一下。</p>
<p>最后说一下自己的看法：vite和snowpack在我看来，区别真不算大。但是使用vite意味着现在webpack打包的那一套配置都得改，甚至可能要修改打包的流水线，某种程度上提高了使用vite的门槛，有可能会阻塞vite的推广。毕竟一项技术能否普及，首先要看市场的需要，其次是上车的门槛和社区生态。但是vite有一个天然的优势就是尤雨溪这个名字，可以让vite获得更高的曝光度，吸引更多人来关注，但是实际应用还是需要尤雨溪团队再推动一下才行。</p>
</body></html>]]></content>
      <categories>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>前端工程化</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>初探Vue3.0新特性(未完待续)</title>
    <url>//2018/12/10/Vue3.0/</url>
    <content><![CDATA[<html><head></head><body><p align="center"><a href="#" target="_blank" rel="noopener noreferrer">
<img width="200" height="200" data-src="https://cn.vuejs.org/images/logo.png" alt="Vue"></a></p>

<blockquote>
<h3 id="初探-Vue3-0-新特性"><a href="#初探-Vue3-0-新特性" class="headerlink" title="初探 Vue3.0 新特性"></a>初探 Vue3.0 新特性</h3><p> “ 我已经学不动了，只有神可以挽救一下我的膝盖—-” 自 2016 年 10 月 1 日 Vue2.0 版本发布以来到目前为止已经将近快两年的时间了。在这两年里，前端领域风云变化，各种框架层出不穷。小程序横空出世，angular 已经迭代到 angular6,从 angular2 开始已经基本上是将 angularjs 推倒重来，蜕变升级。等等。。。在这两年里，我们看到了太多的框架出现和消失，前端框架基本上是 vue react angular 三足鼎立。感谢各位开源大大，是你们推动了整个前端领域的快速发展。<br> 与此同时，面对一时间涌现的那么多种前端框架，很多小伙伴们都会感觉力不从心，甚至还出现了众多用户到某知名开源项目上留言：“求求你别写了，我们学不动了~~”<br> 今天，Vue 的主要开发者尤小右在微博上透露了 Vue3.0 的开发计划，快来看看有哪些新改变吧。</p>
</blockquote>
<p><img data-src="/assets/img/2018/12/vue3.0.png" alt="image"></p>
<blockquote>
<h3 id="9月30日，尤雨溪在medium个人博客上发布了vue3-0的开发思路，国内有翻译的版本，见文章最后的参考链接。3-0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。"><a href="#9月30日，尤雨溪在medium个人博客上发布了vue3-0的开发思路，国内有翻译的版本，见文章最后的参考链接。3-0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。" class="headerlink" title="9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。"></a>9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。</h3><p>1.Virtual DOM 完全重写，mounting &amp; patching 提速 &nbsp;100% ;<br>2.更多编译时（compile-time）提醒以减少 runtime 开销;<br>3.基于 Proxy 观察者机制以满足全语言覆盖及更好的性能;<br>4.放弃 Object.defineProperty ，使用更快的原生 Proxy;<br>5.组件实例初始化速度提高 100％;<br>6.提速一倍/内存使用降低一半。</p>
</blockquote>
<span id="more"></span>
<blockquote>
<h3 id="对于-3-0-的-proxy-特性有必要讲一讲"><a href="#对于-3-0-的-proxy-特性有必要讲一讲" class="headerlink" title="对于 3.0 的 proxy 特性有必要讲一讲"></a>对于 3.0 的 proxy 特性有必要讲一讲</h3><p>对于这个观察者机制的变更，给我带来的好处简直不言而喻。（我们终于不再担心目前官网上提的那个检测数组/检测对象变更了）</p>
</blockquote>
<p> 不久前，也就是11月14日-16日于多伦多举办的 VueConf TO 2018 大会上，尤雨溪发表了名为 Vue3.0 Updates 的主题演讲，对 Vue3.0 的更新计划、方向进行了详细阐述（感兴趣的小伙伴可以看看完整的 [PPT](<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdvb2ds5Yid5o6iLw==">https://docs.googl初探<i class="fa fa-external-link-alt"></i></span> Vue3.0 新特性e.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing)），表示已经放弃使用了 Object.defineProperty，而选择了使用更快的原生 Proxy !!<br> 这将会消除了之前 Vue2.x 中基于 Object.defineProperty 的实现所存在的很多限制：无法监听 属性的添加和删除、数组索引和长度的变更，并可以支持 Map、Set、WeakMap 和 WeakSet！</p>
<p><img data-src="/assets/img/2018/12/1.png" alt="image"><br><img data-src="/assets/img/2018/12/2.png" alt="image"></p>
<blockquote>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3></blockquote>
<p>最后期待，2019年的VUE3.0的发布，来让前端开发更便捷，更cool！<br>参考文献：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmZjYmFiMDUxODgyNTc0MWU3YmQ2N2Y=">初探 Vue3.0 中的一大亮点——Proxy !<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvazZPaE1OcnBhZ3RUbWJoa1ctdG1aZw==">重磅！尤雨溪发布Vue 3.0开发路线<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMXloUEd5aFFySmNwSkkyWkZ2Qm1lM3BHS2FHTmlMaTcwOWMzN3N2aXZ2MG8vZWRpdD91c3A9c2hhcmluZw==">尤大大的PPT(需要翻墙下载)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHk=">Proxy MDN<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex 状态管理插件学习</title>
    <url>//2018/03/12/Vuex/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Vue-状态管理插件学习"><a href="#Vue-状态管理插件学习" class="headerlink" title="Vue 状态管理插件学习"></a>Vue 状态管理插件学习</h1><ul>
<li><p>vuex vue 提供的数据状态管理插件（俗称数据共享中心）</p>
</li>
<li><p>state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）</p>
</li>
<li><p>获取仓库中定义值的方法</p>
</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// {{$store.state.定义的属性}}</span></span><br><span class="line"><span class="comment">// 使用计算属性</span></span><br><span class="line"><span class="attr">computed</span>:{</span><br><span class="line">	<span class="title function_">count</span>(<span class="params"></span>){</span><br><span class="line">		<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.定义的属性</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<ul>
<li>3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"><span class="attr">computed</span>: <span class="title function_">mapState</span>({</span><br><span class="line">	<span class="attr">count</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">count</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>等同于</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: <span class="title function_">mapState</span>({</span><br><span class="line">	<span class="attr">count</span>: <span class="function"><span class="params">state</span> =&gt;</span> {</span><br><span class="line">		<span class="keyword">return</span> state.<span class="property">count</span></span><br><span class="line">	}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>4.mapState 扩展使用</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: <span class="title function_">mapState</span>([<span class="string">'在state中定义的属性'</span>])</span><br><span class="line"><span class="comment">// 这个会根据你定义的属性名绑定到vue实例上</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>5.mutations 提交更改仓库中定义值的方法（修改状态）</li>
<li>使用$store.commit(‘调用定义在 mutations 中定义的方法名’，要传递给调用方法的参数)</li>
<li>获取状态管理器中定义的方法(mutations)</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = {</span><br><span class="line">	<span class="comment">// 定义一个加的方法</span></span><br><span class="line">	<span class="title function_">add</span>(<span class="params">state</span>) {</span><br><span class="line">		state.<span class="property">count</span>++</span><br><span class="line">	},</span><br><span class="line">	<span class="comment">// 定义一个减的方法</span></span><br><span class="line">	<span class="title function_">reduce</span>(<span class="params">state</span>) {</span><br><span class="line">		state.<span class="property">count</span>--</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="comment">// 在vue中使用import导入辅助函数</span></span><br><span class="line"><span class="keyword">import</span> { mapState, mapMutations } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: <span class="title function_">mapMutations</span>([<span class="string">'add'</span>, <span class="string">'reduce'</span>])</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="attr">methods</span>: <span class="title function_">mapMutations</span>([(<span class="attr">countAdd</span>: <span class="string">'add'</span>), (<span class="attr">countReauce</span>: <span class="string">'reduce'</span>)])</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>6.vuex 中的计算属性（过滤属性）getters</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 定义方法</span></span><br><span class="line"><span class="keyword">const</span> getters = {</span><br><span class="line">  <span class="attr">count</span>:<span class="keyword">function</span>(<span class="params">state</span>){</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">count</span> += <span class="number">100</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">// 或者</span></span><br><span class="line">	<span class="attr">count</span>: <span class="function"><span class="params">state</span> =&gt;</span> { <span class="keyword">return</span> state.<span class="property">count</span> += <span class="number">100</span> }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="keyword">import</span> { mapState,mapMutations,mapGetters } <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line"><span class="attr">computed</span>: <span class="title function_">mapGetters</span>({</span><br><span class="line">	<span class="attr">count</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> { <span class="keyword">return</span> state.<span class="property">count</span> }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>7.vuex 中的 actions，异步提交方式</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = {</span><br><span class="line">	<span class="comment">// context：上下文对象，这里你可以理解称store本身。</span></span><br><span class="line">	<span class="title function_">addAction</span>(<span class="params">context</span>) {</span><br><span class="line">		context.<span class="title function_">commit</span>(<span class="string">'add'</span>, <span class="number">10</span>)</span><br><span class="line">	},</span><br><span class="line">	<span class="comment">// {commit}：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。</span></span><br><span class="line">	<span class="title function_">reduceAction</span>(<span class="params">{ commit }</span>) {</span><br><span class="line">		<span class="title function_">commit</span>(<span class="string">'reduce'</span>)</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>8.module 模块组</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中</span></span><br><span class="line"><span class="keyword">const</span> moduleA={</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  getters,</span><br><span class="line">  actions</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="attr">modules</span>: {</span><br><span class="line">  <span class="comment">//模块别名:模块名，记得要使用import引入模块</span></span><br><span class="line">	<span class="attr">a</span>:moduleA</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用模块值和方法</span></span><br><span class="line">和以上的使用方法一样，只不过前边加一个模块别名</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>vue</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack打包工具总结</title>
    <url>//2017/12/29/Webpack/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><ul>
<li>安装 webpack</li>
<li>配置 webpack.config.js<blockquote>
<p>官方教程：<span class="exturl" data-url="aHR0cHM6Ly9kb2Mud2VicGFjay1jaGluYS5vcmcvY29uZmlndXJhdGlvbi8jLQ==">https://doc.webpack-china.org/configuration/#-<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">	<span class="attr">entry</span>: <span class="string">'./foo.js'</span>,</span><br><span class="line">		<span class="attr">output</span>: {</span><br><span class="line">		<span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">		<span class="attr">filename</span>: <span class="string">'foo.bundle.js'</span></span><br><span class="line">	}</span><br><span class="line">	<span class="attr">module</span>:</span><br><span class="line">		<span class="attr">rules</span>: [</span><br><span class="line">			{</span><br><span class="line">				<span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">				<span class="attr">use</span>: <span class="string">'babel-loader'</span>，</span><br><span class="line">				<span class="attr">include</span>: [</span><br><span class="line">		  path.<span class="title function_">resolve</span>(__dirname, <span class="string">"app"</span>)</span><br><span class="line">		],</span><br><span class="line">		<span class="attr">exclude</span>: [</span><br><span class="line">		  path.<span class="title function_">resolve</span>(__dirname, <span class="string">"app/demo-files"</span>)</span><br><span class="line">		],</span><br><span class="line">		<span class="comment">// 这里是匹配条件，每个选项都接收一个正则表达式或字符串</span></span><br><span class="line">		<span class="comment">// test 和 include 具有相同的作用，都是必须匹配选项</span></span><br><span class="line">		<span class="comment">// exclude 是必不匹配选项（优先于 test 和 include）</span></span><br><span class="line">		<span class="comment">// 最佳实践：</span></span><br><span class="line">		<span class="comment">// - 只在 test 和 文件名匹配 中使用正则表达式</span></span><br><span class="line">		<span class="comment">// - 在 include 和 exclude 中使用绝对路径数组</span></span><br><span class="line">		<span class="comment">// - 尽量避免 exclude，更倾向于使用 include</span></span><br><span class="line">			}</span><br><span class="line">		]</span><br><span class="line">		<span class="attr">plugins</span>: [</span><br><span class="line">		<span class="title function_">new</span> (webpack.<span class="property">optimize</span>.<span class="property">UglifyJsPlugin</span>)</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(<span class="attr">template</span>: <span class="string">'./src/index.html'</span>)</span><br><span class="line">	  ]</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<ul>
<li>模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,</li>
<li>Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：<br>在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// npm install --save-dev html-webpack-plugin</span></span><br><span class="line"><span class="comment">// 在webpack.config.js中配置：</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">	<span class="attr">entry</span>: {</span><br><span class="line">		<span class="attr">app</span>: <span class="string">'./src/index.js'</span>,</span><br><span class="line">		<span class="attr">print</span>: <span class="string">'./src/print.js'</span></span><br><span class="line">	},</span><br><span class="line">	<span class="attr">plugins</span>: [</span><br><span class="line">		<span class="keyword">new</span> <span class="title function_">cleanWebpackPlugin</span>([<span class="string">'dist'</span>]), <span class="comment">//数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前</span></span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>({</span><br><span class="line">			<span class="attr">title</span>: <span class="string">'页面标题'</span>, <span class="comment">//生成页面标题</span></span><br><span class="line">			<span class="attr">filename</span>: <span class="string">'index.html'</span>, <span class="comment">//要生成的文件名</span></span><br><span class="line">			<span class="attr">template</span>: <span class="string">'index.html'</span> <span class="comment">//要生成页面的时候的模板</span></span><br><span class="line">		})</span><br><span class="line">	],</span><br><span class="line">	<span class="attr">output</span>: {</span><br><span class="line">		<span class="attr">filename</span>: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">		<span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>JSon 文件中不能以有注释</li>
<li>使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="comment">// 例:</span></span><br><span class="line"> <span class="string">"scripts"</span>: {</span><br><span class="line">   <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --inline --hot --open --port 3000"</span></span><br><span class="line"> },</span><br><span class="line"> <span class="comment">// 启动命令为 npm run dev</span></span><br><span class="line"> <span class="comment">// 例:</span></span><br><span class="line"> <span class="string">"scripts"</span>: {</span><br><span class="line">   <span class="string">"start"</span>: <span class="string">"webpack-dev-server --inline --hot --open --port 3000"</span></span><br><span class="line"> },</span><br><span class="line"> <span class="comment">// 启动命令为 npm start</span></span><br><span class="line"><span class="comment">// 如果键名是start，可以省略写run</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">- <span class="string">"scripts"</span>: {</span><br><span class="line">	<span class="string">"start"</span>: <span class="string">"webpack-dev-server --inline --hot --open --port 3000"</span></span><br><span class="line">	}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,<span class="comment">//忽略目录</span></span><br><span class="line">  <span class="attr">use</span>: {</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">'babel-loader'</span>,</span><br><span class="line">    <span class="attr">options</span>: {</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！</li>
<li>解析文件的话，要去下载各种文件类型的 loader</li>
<li>webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了</li>
<li>package.json 对象中最后一个参数项，不能书写逗号</li>
</ul>
<h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><ul>
<li>（command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思</li>
<li>vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具</li>
</ul>
<h3 id="打包的工程目录中-src-源码所在文件，dist-发布的目录"><a href="#打包的工程目录中-src-源码所在文件，dist-发布的目录" class="headerlink" title="打包的工程目录中 src 源码所在文件，dist 发布的目录"></a>打包的工程目录中 src 源码所在文件，dist 发布的目录</h3></body></html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>Webpack3.10</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>eslint-vscode-setting</title>
    <url>//2018/11/30/eslint-vscode-setting/</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<h2 id="第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue"><a href="#第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue" class="headerlink" title="第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue"></a>第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue</h2></blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<blockquote>
<h2 id="第二步：在任意目录放置-eslintrc-js"><a href="#第二步：在任意目录放置-eslintrc-js" class="headerlink" title="第二步：在任意目录放置.eslintrc.js"></a>第二步：在任意目录放置.eslintrc.js</h2><h2 id="第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur"><a href="#第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur" class="headerlink" title="第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur"></a>第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur</h2><h2 id="第四步：在-vscode-中的配置"><a href="#第四步：在-vscode-中的配置" class="headerlink" title="第四步：在 vscode 中的配置"></a>第四步：在 vscode 中的配置</h2></blockquote>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// eslint config start</span></span><br><span class="line"><span class="string">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"eslint.options"</span>: {</span><br><span class="line">	<span class="string">"configFile"</span>: <span class="string">"C:/Users/Mark/.eslint/.eslintrc.js"</span></span><br><span class="line">},</span><br><span class="line"><span class="string">"eslint.validate"</span>: [</span><br><span class="line">	<span class="string">"javascript"</span>,</span><br><span class="line">	<span class="string">"javascriptreact"</span>,</span><br><span class="line">	<span class="string">"html"</span>,</span><br><span class="line">	<span class="string">"vue"</span>,</span><br><span class="line">	{</span><br><span class="line">		<span class="string">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">		<span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">	}</span><br><span class="line">],</span><br><span class="line"><span class="string">"vetur.format.options.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">"vetur.format.options.useTabs"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"vetur.format.defaultFormatterOptions"</span>: {</span><br><span class="line">	<span class="string">"prettier"</span>: {</span><br><span class="line">		<span class="comment">// Prettier option here</span></span><br><span class="line">		<span class="string">"semi"</span>: <span class="literal">false</span>,</span><br><span class="line">		<span class="string">"tabWidth"</span>: <span class="number">2</span>,</span><br><span class="line">		<span class="string">"useTabs"</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="string">"singleQuote"</span>: <span class="literal">true</span></span><br><span class="line">	},</span><br><span class="line">	<span class="string">"prettyhtml"</span>: {</span><br><span class="line">		<span class="string">"printWidth"</span>: <span class="number">100</span>, <span class="comment">// No line exceeds 100 characters</span></span><br><span class="line">		<span class="string">"singleQuote"</span>: <span class="literal">false</span> <span class="comment">// Prefer double quotes over single quotes</span></span><br><span class="line">	}</span><br><span class="line">},</span><br><span class="line"><span class="comment">// prettier 格式化配置</span></span><br><span class="line"><span class="string">"prettier.tabWidth"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">"prettier.useTabs"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"prettier.singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"prettier.semi"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">"stylusSupremacy.insertColons"</span>: <span class="literal">false</span>, <span class="comment">// 是否插入冒号</span></span><br><span class="line"><span class="string">"stylusSupremacy.insertSemicolons"</span>: <span class="literal">false</span>, <span class="comment">// 是否插入分好</span></span><br><span class="line"><span class="string">"stylusSupremacy.insertBraces"</span>: <span class="literal">false</span>, <span class="comment">// 是否插入大括号</span></span><br><span class="line"><span class="string">"stylusSupremacy.insertNewLineAroundImports"</span>: <span class="literal">false</span>, <span class="comment">// import之后是否换行</span></span><br><span class="line"><span class="string">"stylusSupremacy.insertNewLineAroundBlocks"</span>: <span class="literal">false</span>,</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>VSCode</tag>
        <tag>ESLint</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC常用软件推荐</title>
    <url>//2019/06/10/mac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<html><head></head><body><h2 id="Coding-IDE"><a href="#Coding-IDE" class="headerlink" title="Coding IDE"></a>Coding IDE</h2><ul>
<li>Visual Studio Code - 微软推出的免费/开源编辑器，TypeScript 支持杠杠的，VSCode 常用插件 <span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v">官方网站<i class="fa fa-external-link-alt"></i></span></li>
<li>atom github 出品开源编辑器 <span class="exturl" data-url="aHR0cHM6Ly9hdG9tLmlvLw==">官方网站<i class="fa fa-external-link-alt"></i></span>,<span class="exturl" data-url="aHR0cHM6Ly9hdG9tLWNoaW5hLm9yZy8=">中文社区<i class="fa fa-external-link-alt"></i></span></li>
<li>sublime3 收费编辑器 <span class="exturl" data-url="aHR0cHM6Ly93d3cuc3VibGltZXRleHQuY29tLw==">官方网站<i class="fa fa-external-link-alt"></i></span></li>
<li>微信开发者工具（开发微信小程序和微信公众号） <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2RldnRvb2xzL2Rvd25sb2FkLmh0bWw=">官方网站<i class="fa fa-external-link-alt"></i></span></li>
<li>支付宝小程序（开发支付宝小程序） <span class="exturl" data-url="aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL21pbmkvaWRlL2Rvd25sb2Fk">官方网站<i class="fa fa-external-link-alt"></i></span></li>
<li>HBuilder DCloud 出品 IDE <span class="exturl" data-url="aHR0cHM6Ly9kY2xvdWQuaW8v">官方网站<i class="fa fa-external-link-alt"></i></span></li>
<li>Webstorm 是 JetBrains 公司旗下一款 JavaScript 开发工具。学生免费。 <span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS93ZWJzdG9ybS8=">官方网站<i class="fa fa-external-link-alt"></i></span><span id="more"></span></li>
</ul>
<h2 id="Git-GUI"><a href="#Git-GUI" class="headerlink" title="Git GUI"></a>Git GUI</h2><ul>
<li><p>SourceTre 一个免费开源的 windows 和 mac 上的 git 客户端 <span class="exturl" data-url="aHR0cHM6Ly93d3cuc291cmNldHJlZWFwcC5jb20v">官方网站<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>Gitkraken 一个免费开源的 windows、mac以及 linux 上的 git 客户端,ui 很棒！ <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2l0a3Jha2VuLmNvbS8=">官方网站<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="调试软件"><a href="#调试软件" class="headerlink" title="调试软件"></a>调试软件</h2><ul>
<li><p>Charles是HTTP代理/ HTTP监视器/反向代理，使开发人员可以查看其计算机与Internet之间的所有HTTP和SSL / HTTPS通信。这包括请求，响应和HTTP标头（其中包含cookie和缓存信息） <span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hhcmxlc3Byb3h5LmNvbS8=">官方网站<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>Fiddler可定制的免费工具、Web会话操作、网页调试 <span class="exturl" data-url="aHR0cHM6Ly93d3cudGVsZXJpay5jb20vZmlkZGxlcg==">官方网站<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>Wireshark专业的抓包工具 <span class="exturl" data-url="aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy8=">官方网站<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="MD文档编写"><a href="#MD文档编写" class="headerlink" title="MD文档编写"></a>MD文档编写</h2><ul>
<li>Markeditor <span class="exturl" data-url="aHR0cHM6Ly93d3cubWFya2VkaXRvci5jb20v">官方网站<i class="fa fa-external-link-alt"></i></span></li>
<li>MWeb <span class="exturl" data-url="aHR0cHM6Ly96aC5td2ViLmltLw==">官方网站<i class="fa fa-external-link-alt"></i></span></li>
<li>Typora <span class="exturl" data-url="aHR0cHM6Ly90eXBvcmEuaW8v">官方网站<i class="fa fa-external-link-alt"></i></span></li>
<li>Markdown 在线编辑器<span class="exturl" data-url="aHR0cHM6Ly9wYW5kYW8uZ2l0aHViLmlvL2VkaXRvci5tZC8=">官方网站<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="邮件收发"><a href="#邮件收发" class="headerlink" title="邮件收发"></a>邮件收发</h2><ul>
<li>网易邮箱</li>
<li>腾讯邮箱</li>
<li>Foxmail</li>
</ul>
<h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><ul>
<li><p>iterm2 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRlcm0yLmNvbS9kb3dubG9hZHMuaHRtbA==">官方网站<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>Iterm2 配置<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2VpeHVxaW4vcC83MDI5MTc3Lmh0bWw=">Mac下终端配置（iterm2 + oh-my-zsh + solarized配色方案）<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="小型工具软件"><a href="#小型工具软件" class="headerlink" title="小型工具软件"></a>小型工具软件</h2><ul>
<li>SwitchHosts 切换 hosts 工具 <span class="exturl" data-url="aHR0cHM6Ly9vbGRqLmdpdGh1Yi5pby9Td2l0Y2hIb3N0cy8=">官方网站<i class="fa fa-external-link-alt"></i></span></li>
<li>Snipaste截图工具 <span class="exturl" data-url="aHR0cHM6Ly96aC5zbmlwYXN0ZS5jb20v">官方网站<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><ul>
<li>本文不提供下载链接，只做推荐！</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>Mac</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>node-sass 安装失败</title>
    <url>//2024/11/15/node-sass-%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<html><head></head><body><ul>
<li>直接npm install时遇到sass软件报错<span id="more"></span></li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm ERR! gyp ERR! stack Error: Can<span class="string">'t find Python executable "python", you can set the PYTHON env variable.</span></span><br><span class="line"><span class="string">npm ERR! gyp ERR! stack     at PythonFinder.failNoPython (D:\code\cesium-demo\node_modules\node-gyp\lib\configure.js:484:19)</span></span><br><span class="line"><span class="string">npm ERR! gyp ERR! stack     at PythonFinder.&lt;anonymous&gt; (D:\code\cesium-demo\node_modules\node-gyp\lib\configure.js:509:16)</span></span><br><span class="line"><span class="string">npm ERR! gyp ERR! stack     at callback (D:\code\cesium-demo\node_modules\graceful-fs\polyfills.js:306:20)</span></span><br><span class="line"><span class="string">npm ERR! gyp ERR! stack     at FSReqCallback.oncomplete (node:fs:202:21)</span></span><br><span class="line"><span class="string">npm ERR! gyp ERR! System Windows_NT 10.0.19045</span></span><br><span class="line"><span class="string">npm ERR! gyp ERR! command "C:\\nvm\\nodejs\\node.exe" "D:\\code\\cesium-demo\\node_modules\\node-gyp\\bin\\node-gyp.js" "rebuild" "--verbose" "--libsass_ext=" "--libsass_cflags=" "--libsass_ldflags=" "--libsass_library="</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>直接使用淘宝镜像源</li>
</ul>
<blockquote>
<p>设置变量 sass_binary_site，指向淘宝镜像地址。示例：</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm i node-sass --sass_binary_site=https://registry.npmmirror.com/node-sass/</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2024.11.5 更新</span></span><br><span class="line"><span class="comment">## 使用上述地址也有问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 可以使用以下方式</span></span><br><span class="line">sass_binary_site=https://registry.npmmirror.com/binary.html?path=node-sass</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以设置系统环境变量的方式。示例</span></span><br><span class="line"><span class="comment"># linux、mac 下</span></span><br><span class="line">SASS_BINARY_SITE=https://registry.npmmirror.com/node-sass/</span><br><span class="line">npm install node-sass</span><br><span class="line"></span><br><span class="line"><span class="comment"># window 下</span></span><br><span class="line"><span class="built_in">set</span> SASS_BINARY_SITE=https://registry.npmmirror.com/node-sass/ &amp;&amp; npm install node-sass</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者直接全局设置</span></span><br><span class="line">npm config <span class="built_in">set</span> sass_binary_site npm i node-sass --sass_binary_site=https://registry.npmmirror.com/node-sass/</span><br><span class="line">npm install node-sass</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>同时需要注意node-sass 版本和 node 版本对应关系</p>
</li>
<li><p>可以在此处查看</p>
</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvbm9kZS1zYXNz">https://www.npmjs.com/package/node-sass<i class="fa fa-external-link-alt"></i></span></p>
</body></html>]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>NPM</tag>
        <tag>node-sass</tag>
      </tags>
  </entry>
  <entry>
    <title>rust-analyzer在vscode中的问题</title>
    <url>//2023/11/24/rust-analyzer%E5%9C%A8vscode%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<html><head></head><body><h2 id="rust-analyzer在vscode中的问题-md"><a href="#rust-analyzer在vscode中的问题-md" class="headerlink" title="rust-analyzer在vscode中的问题.md"></a>rust-analyzer在vscode中的问题.md</h2><ul>
<li><p>无法使用<code>rust-analyzer</code>，或者<code>rust-analyzer</code>一直在加载中</p>
<span id="more"></span>
</li>
<li><p>如果确定没有多个程序占用，可以删除rm -rf ~/.cargo/.package-cache，然后再执行cargo build 或者 cargo run</p>
</li>
<li><p>重启 vscode, 问题即可解决</p>
</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>rust</category>
      </categories>
      <tags>
        <tag>前端基建</tag>
        <tag>Rust</tag>
        <tag>rust-analyzer</tag>
      </tags>
  </entry>
  <entry>
    <title>shell脚本学习</title>
    <url>//2018/12/24/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<html><head></head><body><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>为什么学习脚本编写???</li>
<li>你有没有遇到过这样场景，繁杂并且重复的操作 N 多件~~~</li>
<li>那么这个时候我们是不是可以想一些其他更快捷、更方便的方法呢！（答案是肯定的，肯定有撒因为我们人类可是很懒的高级哺乳动物）<br><img data-src="/assets/img/2018/12/20150424040700733.jpg" alt="image"><br>好了！那么我们步入今天的正题！<span id="more"></span></li>
</ul>
<h3 id="一、shell-中特殊变量"><a href="#一、shell-中特殊变量" class="headerlink" title="一、shell 中特殊变量"></a>一、shell 中特殊变量</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$0</span>    <span class="comment"># 当前脚本的文件名（间接运行时还包括绝对路径）。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$n</span>    <span class="comment"># 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span>    <span class="comment"># 传递给脚本或函数的参数个数。</span></span><br><span class="line"><span class="built_in">echo</span> $*    <span class="comment"># 传递给脚本或函数的所有参数。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$@</span>    <span class="comment"># 传递给脚本或函数的所有参数。被双引号 (" ") 包含时，与 $* 不同，下面将会讲到。</span></span><br><span class="line"><span class="built_in">echo</span> $?    <span class="comment"># 上个命令的退出状态，或函数的返回值。</span></span><br><span class="line"><span class="built_in">echo</span> $$    <span class="comment"># 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$_</span>    <span class="comment"># 上一个命令的最后一个参数</span></span><br><span class="line"><span class="built_in">echo</span> $!    <span class="comment"># 后台运行的最后一个进程的 ID 号</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>示例：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 现在保存为一个test.sh脚本，然后加上几个参数运行：</span></span><br><span class="line">$ ./test.sh <span class="built_in">test</span> test1 test2 test3 test4</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">./test.sh                      <span class="comment"># $0</span></span><br><span class="line">                               <span class="comment"># $n</span></span><br><span class="line">5                              <span class="comment"># $#</span></span><br><span class="line"><span class="built_in">test</span> test1 test2 test3 test4   <span class="comment"># $*</span></span><br><span class="line"><span class="built_in">test</span> test1 test2 test3 test4   <span class="comment"># $@</span></span><br><span class="line">0                              <span class="comment"># $?</span></span><br><span class="line">12305                          <span class="comment"># $$</span></span><br><span class="line">12305                          <span class="comment"># $_</span></span><br><span class="line">                               <span class="comment"># $!</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p> $* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号 (“”) 包含时，都以”$1””$2” … “$n” 的形式输出所有参数。<br>  但是当它们被双引号 (“”) 包含时，”$*”会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@”会将各个参数分开，以”$1””$2” … “$n” 的形式输出所有参数。</p>
</blockquote>
<p>例如：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$*="</span> $*</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\"\$*\"="</span> <span class="string">"$*"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$@="</span> <span class="variable">$@</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\"\$@\"="</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print each param from \$*"</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> $*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print each param from \$@"</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"从 \"\$*\" 获取并打印每一个参数"</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="string">"$*"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"从 \"\$@\" 获取并打印每一个参数"</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>返回结果：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">$*= <span class="built_in">test</span> test1 test2</span><br><span class="line"><span class="string">"$*"</span>= <span class="built_in">test</span> test1 test2</span><br><span class="line"><span class="variable">$@</span>= <span class="built_in">test</span> test1 test2</span><br><span class="line"><span class="string">"<span class="variable">$@</span>"</span>= <span class="built_in">test</span> test1 test2</span><br><span class="line"><span class="built_in">print</span> each param from $*</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">test1</span><br><span class="line">test2</span><br><span class="line"><span class="built_in">print</span> each param from <span class="variable">$@</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">test1</span><br><span class="line">test2</span><br><span class="line">从 <span class="string">"$*"</span> 获取并打印每一个参数</span><br><span class="line"><span class="built_in">test</span> test1 test2</span><br><span class="line">从 <span class="string">"<span class="variable">$@</span>"</span> 获取并打印每一个参数</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">test1</span><br><span class="line">test2</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="二、手工处理参数"><a href="#二、手工处理参数" class="headerlink" title="二、手工处理参数"></a>二、手工处理参数</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    -a)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"发现 -a 选项"</span></span><br><span class="line">        ;;</span><br><span class="line">    -b)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"发现 -b 选项"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"-b 选项的参数值是：<span class="variable">$2</span>"</span></span><br><span class="line">        <span class="built_in">shift</span></span><br><span class="line">        ;;</span><br><span class="line">    -c)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"发现 -c 选项"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"-c 选项的参数值是：<span class="variable">$2</span>"</span></span><br><span class="line">        <span class="built_in">shift</span></span><br><span class="line">        ;;</span><br><span class="line">    -d)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"发现 -d 选项"</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> is not an option"</span></span><br><span class="line">        ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行：./test.sh -a -b t2 -c t3 -d</span></span><br><span class="line"><span class="comment"># 返回结果</span></span><br><span class="line">发现 -a 选项</span><br><span class="line">发现 -b 选项</span><br><span class="line">-b 选项的参数值是：t2</span><br><span class="line">发现 -c 选项</span><br><span class="line">-c 选项的参数值是：t3</span><br><span class="line">发现 -d 选项</span><br></pre></td></tr></tbody></table></figure>

<h3 id="三、getopt-处理参数"><a href="#三、getopt-处理参数" class="headerlink" title="三、getopt 处理参数"></a>三、getopt 处理参数</h3><p>下面 getopt ab:c:d “$@” 中的 abcd 分别代表四个选项，后面带有冒号的表示选项需要参数值。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">GETOPTOUT=`getopt ab:c:d <span class="string">"<span class="variable">$@</span>"</span>`</span><br><span class="line">  <span class="built_in">set</span> -- <span class="variable">$GETOPTOUT</span></span><br><span class="line">  <span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    -a)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"发现 -a 选项"</span></span><br><span class="line">      ;;</span><br><span class="line">    -b)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"发现 -b 选项"</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"-b 选项的参数值是：<span class="variable">$2</span>"</span></span><br><span class="line">      <span class="built_in">shift</span></span><br><span class="line">      ;;</span><br><span class="line">    -c)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"发现 -c 选项"</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"-c 选项的参数值是：<span class="variable">$2</span>"</span></span><br><span class="line">      <span class="built_in">shift</span></span><br><span class="line">      ;;</span><br><span class="line">    -d)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"发现 -d 选项"</span></span><br><span class="line">      ;;</span><br><span class="line">    --)</span><br><span class="line">      <span class="built_in">shift</span></span><br><span class="line">      <span class="built_in">break</span></span><br><span class="line">      ;;</span><br><span class="line">    *)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"未知选项:"</span><span class="variable">$1</span><span class="string">""</span></span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line"> ./proxychains4.sh -a -b t2 -c t3 -d</span><br><span class="line"><span class="comment"># 返回</span></span><br><span class="line">发现 -a 选项</span><br><span class="line">发现 -b 选项</span><br><span class="line">-b 选项的参数值是：t2</span><br><span class="line">发现 -c 选项</span><br><span class="line">-c 选项的参数值是：t3</span><br><span class="line">发现 -d 选项</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ARGV=($(getopt -o 短选项1[:]短选项2[:]...[:]短选项n -l 长选项1,长选项2,...,长选项n -- <span class="string">"<span class="variable">$@</span>"</span>))</span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">set</span> -- <span class="string">"<span class="variable">$ARGV</span>"</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  -短选项1|--长选项1)</span><br><span class="line">    process</span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line">    ;;</span><br><span class="line">  -短选项2|--长选项2)</span><br><span class="line">    <span class="comment"># 获取选项</span></span><br><span class="line">    opt = <span class="variable">$2</span></span><br><span class="line">    process</span><br><span class="line">    <span class="built_in">shift</span> 2</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">  ... ...</span><br><span class="line"></span><br><span class="line">  -短选项3|--长选项3)</span><br><span class="line">    process</span><br><span class="line">    ;;</span><br><span class="line">  --)</span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>关于 eval 这个命令，用一个小例子解释：</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">foo=10</span><br><span class="line">x=foo</span><br><span class="line">y=<span class="string">'$'</span><span class="variable">$x</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$y</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$foo</span></span><br><span class="line"><span class="built_in">eval</span> y=<span class="string">'$'</span><span class="variable">$x</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回</span></span><br><span class="line"><span class="variable">$foo</span></span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为我一般用这个命令连接构建命令参数，所以你可以简单理解为执行两次（虽然不太对）。通过添加 eval 可以把参数解析后再执行。</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="四、getopts-处理参数"><a href="#四、getopts-处理参数" class="headerlink" title="四、getopts 处理参数"></a>四、getopts 处理参数</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> :ab:c:d ARGS</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$ARGS</span> <span class="keyword">in</span></span><br><span class="line">  a)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"发现 -a 选项"</span></span><br><span class="line">    ;;</span><br><span class="line">  b)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"发现 -b 选项"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"-b 选项的值是：<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">  c)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"发现 -c 选项"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"-c 选项的值是：<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">  d)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"发现 -d 参数"</span></span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"未知选项：<span class="variable">$ARGS</span>"</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>这种方法最方便简单。接下来基于这种方法深入讲解。</p>
<h3 id="五、传参意外处理"><a href="#五、传参意外处理" class="headerlink" title="五、传参意外处理"></a>五、传参意外处理</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"?"</span>)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"未知选项 <span class="variable">$OPTARG</span>"</span></span><br><span class="line">  ;;</span><br><span class="line"><span class="string">":"</span>)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"没有输入任何选项 <span class="variable">$OPTARG</span>"</span></span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  <span class="comment"># 发生不能预料的错误时。</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"处理选项时出现未知错误"</span></span><br><span class="line">  ;;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kM2NkMzZjOTdhYmM=">Shell 脚本传参方法总结<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9saW51eC9sLWJhc2gtcGFyYW1ldGVycy5odG1s">Bash 参数和参数扩展<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy4zNjF3YXkuY29tL3NoZWxsLWdldG9wdC80OTgxLmh0bWw=">shell中的getopt与getopts<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>系统命令</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>系统底层</tag>
        <tag>Shell</tag>
        <tag>脚本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>sourceTree 使用rebase操作</title>
    <url>//2020/06/12/sourceTree-%E4%BD%BF%E7%94%A8rebase%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<html><head></head><body><p><code>git merge</code> vs <code>git rebase</code></p>
<span id="more"></span>

<h2 id="我们先来做个简单的对比吧"><a href="#我们先来做个简单的对比吧" class="headerlink" title="我们先来做个简单的对比吧"></a>我们先来做个简单的对比吧</h2><ul>
<li><p>原始状态<br><img data-src="/2020/06/12/sourceTree-%E4%BD%BF%E7%94%A8rebase%E6%93%8D%E4%BD%9C/006tNbRwgy1fy69b0529uj30sy0pg41h.jpg"></p>
</li>
<li><p>使用<code>git merge</code>操作，产生的路径图<br><img data-src="/2020/06/12/sourceTree-%E4%BD%BF%E7%94%A8rebase%E6%93%8D%E4%BD%9C/1.png"></p>
</li>
<li><p>使用<code>git rebase</code>操作，产生的路径图<br><img data-src="/2020/06/12/sourceTree-%E4%BD%BF%E7%94%A8rebase%E6%93%8D%E4%BD%9C/006tNbRwgy1fy69dtpcenj30zk0fstbx.jpg"></p>
</li>
</ul>
<h2 id="使用git-rebase操作"><a href="#使用git-rebase操作" class="headerlink" title="使用git rebase操作"></a>使用<code>git rebase</code>操作</h2><ul>
<li><p>完成功能分支之后先不 merge，而是 <code>git checkout 主分支</code> 回到主干分支去 <code>git pull --rebase</code></p>
</li>
<li><p>如果主干有更新，<code>git rebase 分支</code> 更新主分支的内容到功能分支来预检一下，看看在加入了最近别人的改动之后我的功能是否依然 OK（在这个过程中可能会有冲突处理，解决冲突之后使用 <code>git add .</code> 更新索引，更新完之后不需要执行 commit，只要执行 <code>git rebase --continue</code> 应用余下的补丁即可）</p>
</li>
<li><p>一切就绪之后再次 <code>git fetch</code> 主干看看有没有变动（因为在第二步的进行期间没准又有人 push 了新的变化），有的话重复第二部</p>
</li>
<li><p>合并功能分支到主干然后 push，收工。</p>
</li>
<li><p>用 git 整合分支的时候，大家更常用的是变基操作 (git rebase) 还是合并操作 (git merge)，你们觉得哪个比较好？</p>
</li>
<li><p>在 sourceTree 中使用 rebase （变基）,使用 rebase 命令保持主分支树的整洁</p>
</li>
<li><p>git 的 GUI 工具 Sourcetree 使用及命令行对比</p>
</li>
<li><p>假如我们要在 master 分支上进行开发，在远端的 master 分支上右键，检出 一个自己的开发分支 dev-1<br><img data-src="/2020/06/12/sourceTree-%E4%BD%BF%E7%94%A8rebase%E6%93%8D%E4%BD%9C/006tNbRwgy1fy69bjs148j30t20v2ae7.jpg"><br><img data-src="/2020/06/12/sourceTree-%E4%BD%BF%E7%94%A8rebase%E6%93%8D%E4%BD%9C/006tNbRwgy1fy69c5ndkcj30u40r2diy.jpg"></p>
</li>
<li><p>做一些开发，提交到本地，不要推送（push）到远端,切换到 master 分支，拉取远端的 master 更新，（这里另一个同事在 master 分支上提交了 dev 2 的更新）<br><img data-src="/2020/06/12/sourceTree-%E4%BD%BF%E7%94%A8rebase%E6%93%8D%E4%BD%9C/006tNbRwgy1fy69cyad02j30zk0ec0xz.jpg"></p>
</li>
<li><p>切换到自己的开发分支 dev-1，选中 master 分支，右键，选择 将当前变更变基到 master<br><img data-src="/2020/06/12/sourceTree-%E4%BD%BF%E7%94%A8rebase%E6%93%8D%E4%BD%9C/006tNbRwgy1fy69daffwqj30ta0mm0wn.jpg"></p>
</li>
<li><p>如果有冲突则合并冲突，点击左上角的加号，选择 继续变基<br><img data-src="/2020/06/12/sourceTree-%E4%BD%BF%E7%94%A8rebase%E6%93%8D%E4%BD%9C/006tNbRwgy1fy69dg5ei0j30zk0g4434.jpg"></p>
</li>
<li><p>此时我们的本地更新是基于最新的 master 分支<br><img data-src="/2020/06/12/sourceTree-%E4%BD%BF%E7%94%A8rebase%E6%93%8D%E4%BD%9C/006tNbRwgy1fy69dkjpc8j30uo0h20vf.jpg"></p>
</li>
<li><p>最后’推送’我们的开发分支 dev-1 到远端,切换到 master 分支，点击 拉取，拉取 dev-1 的更新到 master 分支<br><img data-src="/2020/06/12/sourceTree-%E4%BD%BF%E7%94%A8rebase%E6%93%8D%E4%BD%9C/006tNbRwgy1fy69doxd6zj30ym0h00vp.png"></p>
</li>
<li><p>再推送 master 分支，就保证了 git 分支的整洁<br><img data-src="/2020/06/12/sourceTree-%E4%BD%BF%E7%94%A8rebase%E6%93%8D%E4%BD%9C/006tNbRwgy1fy69dtpcenj30zk0fstbx.jpg"></p>
</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mN2VkM2RkMGQyZDg=">Git rebase使用<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwOTA2Nzk4NA==">团队开发Git分支管理策略<i class="fa fa-external-link-alt"></i></span></p>
</body></html>]]></content>
      <categories>
        <category>多人协作开发</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>git 多人协作开发</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>分享 stylus 语法学习笔记</title>
    <url>//2019/05/28/stylus%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$var_name</span> = value</span><br></pre></td></tr></tbody></table></figure>

<p>is defined 用来判断一个变量是否已经被赋值。</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">foo is defined</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<p>或者采用内置函数 lookup(name)：</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">name = <span class="number">#80e2e9</span></span><br><span class="line"><span class="function"><span class="title">lookup</span><span class="params">(name)</span></span> <span class="comment">// 变量名，判断是否已经定义该变量</span></span><br><span class="line"><span class="comment">// =&gt; #80e2e9</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">$i</span> <span class="keyword">in</span> (<span class="number">0</span> .. <span class="number">24</span>)</span><br><span class="line">   .cc-{<span class="variable">$i</span>}</span><br><span class="line">      <span class="attribute">width</span> <span class="number">100</span> / <span class="variable">$i</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>@import “文件路径”<br>@import “文件路径/*“导入目录下所有 styl 文件</p>
<p>@require “文件路径”<br>@require “文件路径/*“导入目录下所有 styl 文件</p>
<h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><p>{}使用该花括号进行插值<br>Stylus 支持使用{}字符包围表达式进行插值，然后表达式成为标识符的一部分。<br>例如：</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">-webkit-{<span class="string">'border'</span> + <span class="string">'-radius'</span>}评估为-webkit-<span class="attribute">border-radius</span>。</span><br></pre></td></tr></tbody></table></figure>

<p>选择器插值</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span></span><br><span class="line">  <span class="keyword">for</span> row <span class="keyword">in</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">    <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>({row})</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">10px</span> * row</span><br></pre></td></tr></tbody></table></figure>

<p>会产生如下 css</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) {</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) {</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) {</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) {</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) {</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>您还可以通过构建一个字符串并将它们插入到位来将多个选择器放在一个变量中：</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">mySelectors = <span class="string">'#foo,#bar,.baz'</span></span><br><span class="line"></span><br><span class="line">{mySelectors}</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span></span><br></pre></td></tr></tbody></table></figure>

<p>产生如下</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-id">#foo</span>,</span><br><span class="line"><span class="selector-id">#bar</span>,</span><br><span class="line"><span class="selector-class">.baz</span> {</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h3><p>mixin 和函数都以相同的方式定义，但它们以不同的方式应用。</p>
<p>例如，我们有一个 border-radius(n)下面定义的函数，它作为 mixin 调用（即，作为语句调用，而不是表达式的一部分）。</p>
<p>在 border-radius()选择器中调用时，属性将展开并复制到选择器中。</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">border-radius</span><span class="params">(n)</span></span></span><br><span class="line">  -webkit-<span class="attribute">border-radius</span> n</span><br><span class="line">  -moz-<span class="attribute">border-radius</span> n</span><br><span class="line">  <span class="attribute">border-radius</span> n</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> <span class="selector-tag">input</span><span class="selector-attr">[type=button]</span></span><br><span class="line">  <span class="attribute">border-radius</span>(<span class="number">5px</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>编译后</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">form</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"button"</span>]</span> {</span><br><span class="line">	-webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">	-moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>使用 mixins 时，您可以完全省略括号，提供出色的透明供应商属性支持！</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">border-radius</span><span class="params">(n)</span></span></span><br><span class="line">  -webkit-<span class="attribute">border-radius</span> n</span><br><span class="line">  -moz-<span class="attribute">border-radius</span> n</span><br><span class="line">  <span class="attribute">border-radius</span> n</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> <span class="selector-tag">input</span><span class="selector-attr">[type=button]</span></span><br><span class="line">  <span class="attribute">border-radius</span> <span class="number">5px</span></span><br></pre></td></tr></tbody></table></figure>

<p>请注意，border-radius 我们的 mixin 中的内容被视为属性，而不是递归函数调用。<br>为了更进一步，我们可以利用自动 arguments 局部变量，包含传递的表达式，允许传递多个值：<br>arguments 和 js 函数的 arguments 差不多都是获取函数实际参数<br>length(arguments) 获取参数个数</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">border-radius</span><span class="params">()</span></span></span><br><span class="line">  -webkit-<span class="attribute">border-radius</span> arguments</span><br><span class="line">  -moz-<span class="attribute">border-radius</span> arguments</span><br><span class="line">  <span class="attribute">border-radius</span> arguments</span><br></pre></td></tr></tbody></table></figure>

<p>现在我们可以传递像 border-radius 1px 2px / 3px 4px！</p>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>^[N],选择嵌套选择器的第个<br>^[N]表示部分引用，其中 N 是数字(-1, 0, 1 等等)。<br>^[0]引用嵌套选择器中的第一层，^[1]则引用第一层和第二层。</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo</span></span><br><span class="line">  &amp;__bar</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span></span><br><span class="line"></span><br><span class="line">    ^<span class="selector-attr">[0]</span><span class="selector-pseudo">:hover</span> &amp;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">20px</span></span><br></pre></td></tr></tbody></table></figure>

<p>注：第一层和第二层是一个完整的选择器.foo__bar，但^[0]部分引用第一层，即.foo。<br>编译后：</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo__bar</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.foo</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.foo__bar</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>若 N 为负数，则从尾部计算。如^[-1]表示去除最后一层后剩下部分的引用。</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo</span></span><br><span class="line">  &amp;__bar</span><br><span class="line">    &amp;_baz</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">10px</span></span><br><span class="line"></span><br><span class="line">      ^<span class="selector-attr">[-1]</span><span class="selector-pseudo">:hover</span> &amp;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">20px</span></span><br></pre></td></tr></tbody></table></figure>

<p>编译后：</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo__bar_baz</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.foo__bar</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.foo__bar_baz</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="块混合-Block-mixins"><a href="#块混合-Block-mixins" class="headerlink" title="块混合 Block mixins"></a>块混合 Block mixins</h3><p>我们使用+前缀可以给混合(mixins)传递块(blocks):</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">foo</span><span class="params">()</span></span></span><br><span class="line">  <span class="selector-class">.bar</span></span><br><span class="line">    {block}<span class="comment">// 调用 mixins里的代码块类似vue 的slot一样</span></span><br><span class="line"></span><br><span class="line">+<span class="built_in">foo</span>()</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span></span><br><span class="line">编译后：</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bar</span> {</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h3><p><span class="exturl" data-url="aHR0cDovL3N0eWx1cy1sYW5nLmNvbS9kb2NzL2JpZnMuaHRtbA==">文档<i class="fa fa-external-link-alt"></i></span></p>
</body></html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>stylus</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora For Markdown 语法</title>
    <url>//2018/03/12/typora/</url>
    <content><![CDATA[<html><head></head><body><p>#Typora For Markdown 语法</p>
<p><span class="exturl" data-url="aHR0cDovL3hpYW5iYWkubWUvbGVhcm4tbWQvaW5kZXguaHRtbA==">Learning-Markdown (Markdown 入门参考)<i class="fa fa-external-link-alt"></i></span><br>[TOC]</p>
<p>###数学表达式</p>
<p>要启用这个功能，首先到<code>Preference</code>-&gt;<code>Editor</code>中启用。然后使用<code>$</code>符号包裹 Tex 命令，例如：<code>$lim_{x \to \infty} \ exp(-x)=0$</code>将产生如下的数学表达式：</p>
<p>$\lim_{x \to \infty} \exp(-x)=0$</p>
<span id="more"></span>
<p>###下标</p>
<p>下标使用<code>~</code>包裹，例如：<code>H~2~O</code>将产生 H<del>2</del>O, 即水的分子式。</p>
<p>###上标</p>
<p>上标使用<code>^</code>包裹，例如：<code>y^2^=4</code>将产生表达式 y^2^ = 4</p>
<p>###插入表情:happy:</p>
<p>使用<code>:happy:</code>输入表情:happy:,使用<code>:sad:</code>输入表情:sad:,使用<code>:cry:</code>输入表情:cry:等。以此类推！</p>
<h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>用 HTML 的语法<code>&lt;u&gt;Underline&lt;/u&gt;</code>将产生下划线<u>Underline</u>.</p>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>GFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用<code>~~</code>包裹的文本将会具有删除的样式，例如<code>~删除文本~</code>将产生<del>删除文本</del>的样式。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>使用`包裹的内容将会以代码样式显示，例如</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">使用`printf()`</span><br></pre></td></tr></tbody></table></figure>

<p>则会产生<code>printf()</code>样式。</p>
<ul>
<li><p>输入<code>~~~</code>或者```然后回车，可以输入代码块，并且可以选择代码的语言。例如：</p>
</li>
<li><pre><code>​```java
public Class HelloWorld{
  System.out.println("Hello World!");
}
​```
</code></pre>
<p>将会产生</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class HelloWorld{</span><br><span class="line">  System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>使用两个*号或者两个_包裹的内容将会被强调。例如</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">**使用两个*号强调内容**</span><br><span class="line">__使用两个下划线强调内容__</span><br></pre></td></tr></tbody></table></figure>

<p>将会输出</p>
<p><strong>使用两个*号强调内容</strong><br><strong>使用两个下划线强调内容</strong><br>Typroa 推荐使用两个*号。</p>
<h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>在标准的 Markdown 语法中，*和_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\*</span><br></pre></td></tr></tbody></table></figure>

<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。</p>
<p><img data-src="http://typora.io/img/drag-img.gif" alt="drag and drop image"></p>
<p>​</p>
<p>​</p>
</li>
</ul>
<h3 id="插入-URL-连接"><a href="#插入-URL-连接" class="headerlink" title="插入 URL 连接"></a>插入 URL 连接</h3><p>使用尖括号包裹的 url 将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接:&lt;<span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20+">www.baidu.com&gt;<i class="fa fa-external-link-alt"></i></span>.</p>
<p>如果是标准的 url，则会自动产生连接，例如:<span class="exturl" data-url="aHR0cDovL3d3dy5nb29nbGUuY29tLw==">www.google.com<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="目录列表-Table-of-Contents（TOC）"><a href="#目录列表-Table-of-Contents（TOC）" class="headerlink" title="目录列表 Table of Contents（TOC）"></a>目录列表 Table of Contents（TOC）</h3><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p>
<h3 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h3><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p>
<hr>
<h3 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h3><p>我们可以对某一个词语进行标注。例如</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">某些人用过了才知道[^注释]</span><br><span class="line">[^注释]:Somebody that I used to know.</span><br></pre></td></tr></tbody></table></figure>

<p>将产生：</p>
<p>某些人用过了才知道[^注释]<br>[^注释]: Somebody that I used to know.</p>
<p>把鼠标放在<code>注释</code>上，将会有提示内容。</p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">|姓名|性别|毕业学校|工资|</span><br><span class="line">|:---|:---:|:---:|---:|</span><br><span class="line">|杨洋|男|重庆交通大学|3200|</span><br><span class="line">|峰哥|男|贵州大学|5000|</span><br><span class="line">|坑货|女|北京大学|2000|</span><br></pre></td></tr></tbody></table></figure>

<p>将产生:</p>
<table>
<thead>
<tr>
<th align="left">姓名</th>
<th align="center">性别</th>
<th align="center">毕业学校</th>
<th align="right">工资</th>
</tr>
</thead>
<tbody><tr>
<td align="left">杨洋</td>
<td align="center">男</td>
<td align="center">重庆交通大学</td>
<td align="right">3200</td>
</tr>
<tr>
<td align="left">峰哥</td>
<td align="center">男</td>
<td align="center">贵州大学</td>
<td align="right">5000</td>
</tr>
<tr>
<td align="left">坑货</td>
<td align="center">女</td>
<td align="center">北京大学</td>
<td align="right">2000</td>
</tr>
</tbody></table>
<p>其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。</p>
<h3 id="数学表达式块"><a href="#数学表达式块" class="headerlink" title="数学表达式块"></a>数学表达式块</h3><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$$\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\\end{vmatrix}$$</span><br></pre></td></tr></tbody></table></figure>

<p>将会产生:</p>
<p>$$\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \\frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \\end{vmatrix}$$</p>
<h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">- [ ] 吃饭</span><br><span class="line">- [ ] 逛街</span><br><span class="line">- [ ] 看电影</span><br><span class="line">- [ ] 约泡</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p><input checked="" disabled="" type="checkbox"> 
吃饭</p>
<pre><code>​
</code></pre>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
逛街</p>
<pre><code>​
</code></pre>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
看电影</p>
<pre><code>​
</code></pre>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
约泡</p>
</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">**无序的列表**</span><br><span class="line">* tfboys</span><br><span class="line">* 杨洋</span><br><span class="line">* 我爱你</span><br></pre></td></tr></tbody></table></figure>

<p><strong>无序的列表</strong></p>
<ul>
<li>tfboys</li>
<li>杨洋</li>
<li>我爱你</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">**有序的列表**</span><br><span class="line">1. 苹果</span><br><span class="line">6. 香蕉</span><br><span class="line">10. 我都不喜欢</span><br></pre></td></tr></tbody></table></figure>

<p><strong>有序的列表</strong></p>
<ol>
<li>苹果</li>
<li>香蕉</li>
<li>我都不喜欢</li>
</ol>
<h3 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h3><p>使用&gt;来插入块引用。例如：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt;这是一个块引用！</span><br></pre></td></tr></tbody></table></figure>

<p>将产生：</p>
<blockquote>
<p>这是一个块引用！</p>
</blockquote>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。</p>
</body></html>]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue二维码组件</title>
    <url>//2018/03/12/vueqr-new/</url>
    <content><![CDATA[<html><head></head><body><h1 id="vue-components"><a href="#vue-components" class="headerlink" title="vue components"></a>vue components</h1><p><a href="https://www.npmjs.com/package/vueqr-new"><img data-src="https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square" alt="npm"></a><a href="https://www.npmjs.com/package/vueqr-new"><img data-src="https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square" alt="npm"></a><a href="https://github.com/Jack-In/vueQr-new/master/license"><img data-src="https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square" alt="npm"></a></p>
<blockquote>
<h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3></blockquote>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>快速添加 <code>vueqr-new</code> 组件到 app 中</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install --save vueqr-new</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="components"><a href="#components" class="headerlink" title="components"></a>components</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vue-qr</span> <span class="attr">:config</span>=<span class="string">"config"</span> <span class="attr">:text</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">vue-qr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> vueQr <span class="keyword">from</span> <span class="string">'vueqr-new'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> config = {</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 容错等级</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">errorCorrectionLevel</span>: <span class="string">'H'</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 图片类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">type</span>: <span class="string">'image/png'</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">rendererOpts</span>: {</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">quality</span>: <span class="number">0.3</span></span></span><br><span class="line"><span class="language-javascript">  },</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 边框与二维码之间的间距</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">margin</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 缩放倍数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">scale</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">width</span>: <span class="number">500</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">maskPattern</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">color</span>: {</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">dark</span>: <span class="string">'#000000'</span>,</span></span><br><span class="line"><span class="language-javascript">  light : <span class="string">"#ffffff"</span></span></span><br><span class="line"><span class="language-javascript">  },</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">style</span>: {</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">width</span>: <span class="string">'128px'</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">border</span>: <span class="string">'1px solid #ccc'</span></span></span><br><span class="line"><span class="language-javascript">  }</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">text</span>: <span class="string">'https://example.com'</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">config</span>: config</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">  },</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: {</span></span><br><span class="line"><span class="language-javascript">    vueQr</span></span><br><span class="line"><span class="language-javascript">  }</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="Component-props"><a href="#Component-props" class="headerlink" title="Component props"></a>Component props</h2><table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>属性描述</th>
</tr>
</thead>
<tbody><tr>
<td>config</td>
<td>Object</td>
<td>qrcode option</td>
</tr>
<tr>
<td>text</td>
<td>String</td>
<td>qrcode value</td>
</tr>
</tbody></table>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pwYW8vcXJjb2RlLnJlYWN0">“node-qrcode”<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3></blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phY2stSW4vdnVlUXItbmV3L2Jsb2IvbWFzdGVyL0xJQ0VOU0U=">MIT<i class="fa fa-external-link-alt"></i></span></p>
</body></html>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>一文彻底弄懂 &quot;Event Loop&quot;</title>
    <url>//2020/06/14/%E4%B8%80%E6%96%87%E5%BD%BB%E5%BA%95%E5%BC%84%E6%87%82-EventLoop/</url>
    <content><![CDATA[<html><head></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>什么是 <code>Event Loop</code> 事件循环机制？有什么作用？为什么面试经常问到？？？我在学习浏览器和NodeJS的Event Loop时翻阅了技术类型网站上大量的文章，这些文章写的都很不错、讲解的也很到位，那为什么我还是要写这篇文章呢？其实呢是由于这些文章都是针对特定的一些案例、一些情况来解释 <code>Event Loop</code>，当很多篇文章凑在一起综合来看，才可以对这些概念有较为深入的理解。<br>于是，我在看了大量文章之后，想要写这么一篇博客，不采用官方的描述，结合自己的理解以及示例代码，用最通俗的语言表达出来。希望大家可以通过这篇文章，了解到Event Loop到底是一种什么机制，浏览器和NodeJS的Event Loop又有什么区别。如果在文中出现书写错误的地方，欢迎大家留言一起探讨。(PS: 其实是很多篇文章组合在一起后才理解了这些。。。如果对你有用，就请给个Star吧~ 如有错误，欢迎指出~)</p>
</blockquote>
<span id="more"></span>

<h2 id="Event-Loop-是什么？"><a href="#Event-Loop-是什么？" class="headerlink" title="Event Loop 是什么？"></a><code>Event Loop</code> 是什么？</h2><blockquote>
<p><code>Event Loop</code> 是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的 <code>Event Loop</code>。</p>
</blockquote>
<ul>
<li>浏览器的 <code>Event Loop</code> 是在html5的规范中明确定义。</li>
<li>NodeJS的 <code>Event Loop</code> 是基于libuv实现的。可以参考Node的官方文档以及libuv的官方文档。</li>
<li>为了解决JS <code>多线程</code> 高效运行，衍生出了主线程和任务队列（同步任务和异步任务），主线程一直在循环运行任务，当执到异步任务的时候，不等待它执行完，而是把异步任务放入到队列中，当所有的同步任务都执行完毕之后，任务队列就会通知主线程执行队列中的任务。之后再重复之前的步骤，就变成了一个循环，也就是我们说的 <code>Event Loop</code> 事件循环机制。</li>
</ul>
<h3 id="浏览器线程"><a href="#浏览器线程" class="headerlink" title="浏览器线程"></a>浏览器线程</h3><blockquote>
<p>我们常说 JS 是单线程语言，但是别忘了常见的浏览器内核可都是多线程的，多个线程间会进行不断通讯，通常会有如下几个线程：</p>
</blockquote>
<ul>
<li>GUI 渲染进程</li>
<li>JS 引擎线程</li>
<li>定时器线程</li>
<li>事件触发线程</li>
<li>异步 HTTP 请求线程</li>
</ul>
<p><img data-src="/2020/06/14/%E4%B8%80%E6%96%87%E5%BD%BB%E5%BA%95%E5%BC%84%E6%87%82-EventLoop/1621f4d1b953533d.png" alt="JS EventLoop"></p>
<ul>
<li>请认真阅读以下代码，并尝试输出？</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'timeout1'</span>);</span><br><span class="line">}, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'start'</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'promise1'</span>);</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'promise2'</span>);</span><br><span class="line">  });</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'promise3'</span>);</span><br><span class="line">      });</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'timeout2'</span>)</span><br><span class="line">  }, <span class="number">0</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'done'</span>);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Microtask-与-Macrotask（宏队列和微队列）"><a href="#Microtask-与-Macrotask（宏队列和微队列）" class="headerlink" title="Microtask 与 Macrotask（宏队列和微队列）"></a>Microtask 与 Macrotask（宏队列和微队列）</h3><blockquote>
<p>在大多数解释 JS Event Loop 的文章中，鲜有谈及 Miscrotask 和 Macrotask 这两个概念，但这两个概念却是非常的重要，我在翻阅 Zone.js Primer  时，里面就经常会提及这两个概念，当时也是看的云里雾里的，这也是我写这篇文章的原因之一。<br>Macrotask（宏队列），也叫tasks。 一些异步任务的回调会依次进入macro task queue（宏任务队列），等待后续被调用，这些异步任务包括：</p>
</blockquote>
<ul>
<li>setTimeout</li>
<li>setInterval</li>
<li>setImmediate (Node独有)</li>
<li>requestAnimationFrame (浏览器独有)</li>
<li>I/O</li>
<li>UI rendering (浏览器独有)</li>
</ul>
<blockquote>
<p>Microtask（微队列），也叫jobs。 另一些异步任务的回调会依次进入micro task queue（微任务队列），等待后续被调用，这些异步任务包括：</p>
</blockquote>
<ul>
<li><p>process.nextTick (Node独有)</p>
</li>
<li><p>Promise</p>
</li>
<li><p>Object.observe</p>
</li>
<li><p>MutationObserver</p>
</li>
<li><p>（注：这里只针对浏览器和NodeJS）</p>
</li>
<li><p>setTimeout(fn,0),会执行一个异步操作，会放到异步队列中，并在同步任务执行完毕后，尽早执行！</p>
</li>
</ul>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWEzMzMyYjUxODgyNTU1N2MwMTE4OTY=">彻底理解 JS Event Loop（浏览器环境）<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTQvMTAvZXZlbnQtbG9vcC5odG1s">JavaScript 运行机制详解：再谈Event Loop<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9FdmVudExvb3A=">并发模型与事件循环–MDN<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmZ1bmRlYnVnLmNvbS8yMDE5LzAxLzE1L2RpZmZyZW5jZXMtb2YtYnJvd3Nlci1hbmQtbm9kZS1pbi1ldmVudC1sb29wLw==">浏览器与Node的事件循环(Event Loop)有何区别?<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9qYWtlYXJjaGliYWxkLmNvbS8yMDE1L3Rhc2tzLW1pY3JvdGFza3MtcXVldWVzLWFuZC1zY2hlZHVsZXMv">Tasks, microtasks, queues and schedules<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI2V2ZW50LWxvb3A=">HTLM5 EVENT LOOP DEFINITIONS<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuL2RvY3MvZ3VpZGVzL2V2ZW50LWxvb3AtdGltZXJzLWFuZC1uZXh0dGljay8jd2hhdC1pcy10aGUtZXZlbnQtbG9vcA==">Node.js 事件循环<i class="fa fa-external-link-alt"></i></span></p>
</body></html>]]></content>
      <categories>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>Javascript</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>使用&#39;SSH config&#39;文件</title>
    <url>//2020/04/11/%E4%BD%BF-SSH-config-%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<html><head></head><body><p><code>ssh</code>的介绍及使用参看：<a href="/SSH/SSH-%E7%AE%80%E4%BB%8B/#more" title="SSH 简介"><code>SSH简介</code></a>、<a href="/SSH/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E5%AF%B9/#more" title="创建 SSH 密钥对"><code>创建SSH密钥对</code></a>。</p>
<span id="more"></span>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p><code>ssh</code>程序可以从以下途径获取配置参数：</p>
<ol>
<li>命令行选项</li>
<li>用户配置文件 (~/.ssh/config)</li>
<li>系统配置文件 (/etc/ssh/ssh_config)</li>
</ol>
<p>配置文件可分为多个配置区段，每个配置区段使用<code>Host</code>来区分。我们可以在命令行中输入不同的<code>host</code>来加载不同的配置段。</p>
<p>对每一个配置项来说，首次获取的参数值将被采用，因此通用的设置应该放到文件的后面，特定<code>host</code>相关的配置项应放到文件的前面。</p>
<h1 id="常用配置项"><a href="#常用配置项" class="headerlink" title="常用配置项"></a>常用配置项</h1><p>下面介绍一些常用的<code>SSH</code>配置项：</p>
<h2 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h2><p><code>Host</code>配置项标识了一个配置区段。</p>
<p><code>ssh</code>配置项参数值可以使用通配符：<code>*</code>代表0～n个非空白字符，<code>?</code>代表一个非空白字符，<code>!</code>表示例外通配。</p>
<p>我们可以在系统配置文件中看到一个匹配所有<code>host</code>的默认配置区段：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ cat /etc/ssh/ssh_config | grep '^Host'</span><br><span class="line">Host *</span><br></pre></td></tr></tbody></table></figure>

<p>这里有一些默认配置项，我们可以在用户配置文件中覆盖这些默认配置。</p>
<h2 id="GlobalKnownHostsFile"><a href="#GlobalKnownHostsFile" class="headerlink" title="GlobalKnownHostsFile"></a>GlobalKnownHostsFile</h2><p>指定一个或多个全局认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为：/etc/ssh/ssh_known_hosts, /etc/ssh/ssh_known_hosts2.</p>
<h2 id="HostName"><a href="#HostName" class="headerlink" title="HostName"></a>HostName</h2><p>指定远程主机名，可以直接使用数字IP地址。如果主机名中包含 ‘%h’ ，则实际使用时会被命令行中的主机名替换。</p>
<h2 id="IdentityFile"><a href="#IdentityFile" class="headerlink" title="IdentityFile"></a>IdentityFile</h2><p>指定密钥认证使用的私钥文件路径。默认为 ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519 或 ~/.ssh/id_rsa 中的一个。文件名称可以使用以下转义符：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">'%d' 本地用户目录</span><br><span class="line">'%u' 本地用户名称</span><br><span class="line">'%l' 本地主机名</span><br><span class="line">'%h' 远程主机名</span><br><span class="line">'%r' 远程用户名</span><br></pre></td></tr></tbody></table></figure>

<p>可以指定多个密钥文件，在连接的过程中会依次尝试这些密钥文件。</p>
<h2 id="Port"><a href="#Port" class="headerlink" title="Port"></a>Port</h2><p>指定远程主机端口号，默认为 22 。</p>
<h2 id="User"><a href="#User" class="headerlink" title="User"></a>User</h2><p>指定登录用户名。</p>
<h2 id="UserKnownHostsFile"><a href="#UserKnownHostsFile" class="headerlink" title="UserKnownHostsFile"></a>UserKnownHostsFile</h2><p>指定一个或多个用户认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为： ~/.ssh/known_hosts, ~/.ssh/known_hosts2.</p>
<p>还有更多参数的介绍，可以参看用户手册：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">man ssh config</span><br></pre></td></tr></tbody></table></figure>

<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><ul>
<li>以下连接为例：</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">SSH 服务器： ssh.test.com</span><br><span class="line">端口号： 2200</span><br><span class="line">账户： user</span><br><span class="line">密钥文件： ~/.ssh/id_rsa_test</span><br></pre></td></tr></tbody></table></figure>

<h2 id="密码认证登录方式为"><a href="#密码认证登录方式为" class="headerlink" title="密码认证登录方式为"></a>密码认证登录方式为</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ ssh -p 2200 -i ~/.ssh/id_rsa_test user@ssh.test.com</span><br><span class="line">user@ssh.test.com's password:</span><br></pre></td></tr></tbody></table></figure>

<h2 id="密钥认证登录方式"><a href="#密钥认证登录方式" class="headerlink" title="密钥认证登录方式"></a>密钥认证登录方式</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ ssh-copy-id -i ~/.ssh/id_rsa_test user@ssh.test.com</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">user@ssh.test.com's password:</span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   "ssh 'user@ssh.test.com'"</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br><span class="line">$ ssh user@ssh.test.com</span><br></pre></td></tr></tbody></table></figure>

<h2 id="使用配置文件方式"><a href="#使用配置文件方式" class="headerlink" title="使用配置文件方式"></a>使用配置文件方式</h2><ul>
<li>有如下配置文件：</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span><br><span class="line">Host sshtest</span><br><span class="line">    HostName ssh.test.com</span><br><span class="line">    User user</span><br><span class="line">    Port 2200</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_test</span><br><span class="line"></span><br><span class="line">Host ssttest2</span><br><span class="line">    HostName ssh.test2.com</span><br><span class="line">    User user2</span><br><span class="line">    Port 2345</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_test2</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>使用配置文件登录：</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ssh sshtest</span><br></pre></td></tr></tbody></table></figure>

<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li><p>1. Ubuntu</p>
</li>
<li><p>2. macOs High Sierra(10.13.2)</p>
</li>
</ul>
<h1 id="参看"><a href="#参看" class="headerlink" title="参看"></a>参看</h1><p><a href="/SSH/SSH-%E7%AE%80%E4%BB%8B/#more" title="SSH 简介">SSH简介</a></p>
<p><a href="/SSH/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E5%AF%B9/#more" title="创建 SSH 密钥对">创建 SSH 密钥对</a></p>
</body></html>]]></content>
      <categories>
        <category>SSH</category>
      </categories>
      <tags>
        <tag>全栈开发</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Volta进行版本管理</title>
    <url>//2021/09/07/%E4%BD%BF%E7%94%A8Volta%E8%BF%9B%E8%A1%8C%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<html><head></head><body><h3 id="Volta-安装及使用"><a href="#Volta-安装及使用" class="headerlink" title="Volta 安装及使用"></a>Volta 安装及使用</h3><ul>
<li>安装 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnZvbHRhLnNoL2d1aWRlL2dldHRpbmctc3RhcnRlZA==">官方文档<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl https://get.volta.sh | bash</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>设置环境变量</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> VOLTA_HOME=<span class="string">"<span class="variable">$HOME</span>/.volta"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$LOCAL</span>/bin:<span class="variable">$VOLTA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></tbody></table></figure>

<span id="more"></span>

<h3 id="Volta-命令介绍"><a href="#Volta-命令介绍" class="headerlink" title="Volta 命令介绍"></a>Volta 命令介绍</h3><p>volta默认的工作目录<code>VOLTA_HOME</code>位置如下</p>
<ul>
<li>~/.volta on Unix</li>
<li>%LOCALAPPDATA%\Volta on Windows</li>
</ul>
<p>因为后续下载安装的各种工具链都是存在该目录下的，所以我这里自定义<code>VOLTA_HOME</code>，比如更改为<code>/User/mark/.volta</code>目录</p>
<ul>
<li>在环境变量中新建一个系统变量名为<code>VOLTA_HOME</code>，值设置<code>/User/mark/.volta</code></li>
</ul>
<p>因为更改了<code>VOLTA_HOME</code>,所以还需要配置下<code>Shim Directory</code>目录，否则通过volta install安装的packages的命令不能使用，比如安装hexo后无法使用hexo xxx命令<br><code>Shim Directory</code>默认目录为<code>%VOLTA_HOME%\bin</code> (Unix下为<code>$VOLTA_HOME/bin</code>)</p>
<ul>
<li>在环境变量中修改PATH中原来的VOLTA_HOME部分</li>
</ul>
<p><strong>注意</strong><br>修改环境变量后重新打开cmd使配置生效</p>
<h3 id="安装指定版本Node"><a href="#安装指定版本Node" class="headerlink" title="安装指定版本Node"></a>安装指定版本Node</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">volta list //查看存在的版本</span><br><span class="line">volta install node //安装最新版的nodejs</span><br><span class="line">volta install node@12.2.0 //安装指定版本</span><br><span class="line">volta install node@12 //volta将选择合适的版本安装</span><br><span class="line">volta pin node@10.15 //将更新项目的package.json文件以使用工具的选定版本</span><br><span class="line">volta pin yarn@1.14 //将更新项目的package.json文件以使用工具的选定版本</span><br></pre></td></tr></tbody></table></figure>

<p><strong>技巧</strong><br><code>volta install &lt;package name&gt;</code>安装tools时与网络有关系，有时会死活下载不下来（主要应该是国内网络环境的原因），可以将自己手动下载的压缩包，或者其他机器上已经使用volta安装过该工具所下载的压缩包（在<code>%VOLTA_HOME%\tools\inventory\</code>目录中），拷贝到<code>%VOLTA_HOME%\tools\inventory\</code>下对应的文件夹内，比如将<code>node-v12.18.2-win-x64.zip</code>复制到<code>%VOLTA_HOME%\tools\inventory\node\</code>目录下，然后再重新执行install命令</p>
<ul>
<li>新选择一个目录，重新配置node_global和node_cache，配置npm config</li>
<li>卸载原来的版本</li>
<li><code>volta install node@10.16.0</code>用volta重新安装原来的版本</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>node yarn npm</tag>
      </tags>
  </entry>
  <entry>
    <title>修改了SSH默认端口之后，如何配置git？</title>
    <url>//2020/01/19/%E4%BF%AE%E6%94%B9%E4%BA%86SSH%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEgit%EF%BC%9F/</url>
    <content><![CDATA[<html><head></head><body><h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><p>由于安全或者其它原因，我们可能会修改默认的SSH服务端口号，默认情况下，已有的git项目在pull或者push的时候会报错！</p>
<p>现在假设原来的项目的remote设置为<span class="exturl" data-url="bWFpbHRvOiYjeDY3OyYjeDY5OyYjeDc0OyYjeDQwOyYjeDc4OyYjeDc4OyYjMTIwOyYjNDY7JiN4NjM7JiN4NmY7JiMxMDk7">git@xxx.com<i class="fa fa-external-link-alt"></i></span>:Projects/xxx.git，将服务器SSH默认端口修改为223后，导致push或 pull出错</p>
<span id="more"></span>
<h3 id="有两个解决办法"><a href="#有两个解决办法" class="headerlink" title="有两个解决办法"></a>有两个解决办法</h3><h4 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote set-url origin ssh://git@xxx.com:223/~/Projects/p1.git</span><br></pre></td></tr></tbody></table></figure>

<h4 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span>&gt;~/.ssh/config</span><br><span class="line"><span class="comment"># 映射一个别名</span></span><br><span class="line">Host xxx.com</span><br><span class="line">HostName xxxx.com</span><br><span class="line">Port 223</span><br><span class="line">AddKeysToAgent <span class="built_in">yes</span></span><br><span class="line">UseKeychain <span class="built_in">yes</span></span><br><span class="line"><span class="comment">#此处是开启git的ssh翻墙代理</span></span><br><span class="line"><span class="comment">#ProxyCommand /usr/bin/nc -X 5 -x 127.0.0.1:1086 %h %p</span></span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></tbody></table></figure>

<p>修改p1.git项目下的git配置文件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote set-url origin git@xxx:Projects/p1.git</span><br></pre></td></tr></tbody></table></figure>

<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tLzIwMTYvMDIvMTgvZ2l0bGFiLWRvdC1jb20tbm93LXN1cHBvcnRzLWFuLWFsdGVybmF0ZS1naXQtcGx1cy1zc2gtcG9ydC8=">gitlab 社区解决方案<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>git操作</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>git</tag>
        <tag>sourceTree</tag>
      </tags>
  </entry>
  <entry>
    <title>创建SSH密钥对</title>
    <url>//2020/04/11/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E5%AF%B9/</url>
    <content><![CDATA[<html><head></head><body><p>SSH 密钥对可以让用户无需输入密码即可登录到 SSH 服务器中。由于登录的过程不需要密码，因此可以防止由于密码被拦截、破解造成的账户密码泄露。再加上密码短语(passphrase)的使用，使得 SSH 的安全性更高一层。</p>
<p>SSH 密钥对总是一把公钥、一把私钥的成对出现；公钥可以自由的添加到远程 SSH 服务器中用来验证用户是否合法；私钥相当于自己的身份认证，需要妥善保存不能泄露。</p>
<p>SSH 密钥的其使用原理很简单：用户将公钥添加到远程主机中，登录的时候，远程主机会向用户发送一段随即字符串，用户使用自己的私钥加密后，再发送到远程主机。远程主机使用本地存储的公钥进行解密，如果成功，证明用户时可信的，直接允许登录 shell ，不再要求密码。这样就保证了整个登录过程的安全，防止了中间人攻击。</p>
<span id="more"></span>
<h1 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h1><h2 id="ssh-keygen-命令"><a href="#ssh-keygen-命令" class="headerlink" title="ssh-keygen 命令"></a>ssh-keygen 命令</h2><p>我们可以使用 <em>ssh-keygen</em> 命令来生成密钥对：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ ssh-keygen -t ecdsa -b 521 -C "$(whoami)@$(hostname)-$(date -I)"</span><br><span class="line">Generating public/private ecdsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/username/.ssh/id_ecdsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /home/username/.ssh/id_ecdsa.</span><br><span class="line">Your public key has been saved in /home/username/.ssh/id_ecdsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">dd:15:ee:24:20:14:11:01:b8:72:a2:0f:99:4c:79:7f username@localhost-2015-03-08</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+--[ECDSA  521]---+</span><br><span class="line">|     ..oB=.   .  |</span><br><span class="line">|    .    . . . . |</span><br><span class="line">|  .  .      . +  |</span><br><span class="line">| oo.o    . . =   |</span><br><span class="line">|o+.+.   S . . .  |</span><br><span class="line">|=.   . E         |</span><br><span class="line">| o    .          |</span><br><span class="line">|  .              |</span><br><span class="line">|                 |</span><br><span class="line">+-----------------+</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>其中可使用 <em>-t</em> 指定加密算法，使用 <em>-b</em> 自定生成密钥长度，使用 <em>-C</em> 添加密钥对的说明comment。生成的密钥对默认存储在用户目录下的 <em>.ssh</em> 目录中，私钥默认名称为 <em>id</em>***_ (即 id_ + 加密算法名称)。还可以使用 <em>-f</em> 指定生成的私钥存储的文件全路径名称；也可以不使用 <em>-f</em> 指定密钥文件路径，在密钥的创建过程中还会提示用户输入密钥文件全路径名称。私钥对应的公钥文件为_私钥文件全名称 + .pub_。</p>
<p>上面例子中创建了一对长度为512位的椭圆加密算法(ECDSA)加密的密钥对。创建 SSH 密钥对可选择多种加密算法，例如 <em>RSA</em> 、 <em>DSA</em> 、 <em>ECDSA</em> 等。</p>
<h2 id="密码短语-Passphras"><a href="#密码短语-Passphras" class="headerlink" title="密码短语(Passphras)"></a>密码短语(Passphras)</h2><p>密码短语(passphras)是一连串的单词或文本组成，用来控制对电脑系统的访问。它的用法类似于密码(Password)，但是通常会比密码长度更长，这样就增加了破解的复杂度。密码短语不同于密码，它可以是有实际意义的一段话，便于用户记忆。</p>
<p>密码短语默认可以不创建，但是这会导致不安全性。私钥是未经加密存储在电脑上的，电脑遗失或被窃取后，任何人拿到你的私钥后都可以随意访问 SSH 服务器；另外，电脑的 <em>root</em> 用户有权限访问电脑上的任意文件，这也包括你的私钥文件。因此，为了提高安全性还是建议用户设置自己的密码短语。</p>
<p>已经生成的密钥对也可以修改密码短语。假设使用的是 RSA 加密的密钥对，存储到默认路径，输入以下命令即可：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># ssh-keygen -f ~/.ssh/id_rsa -p</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h1 id="SSH-agent"><a href="#SSH-agent" class="headerlink" title="SSH agent"></a>SSH agent</h1><p>SSH agent 是 OpenSSH 或其它 SSH 程序提供的一个程序，提供了存储私钥的安全方法。如果用户的私钥使用了密码短语来加密的话，那么每一次使用 SSH密钥进行登录时，都需要用户输入正确的的密钥短语。而 SSH agent 程序能够将已经解密的私钥缓存起来，在需要的时候提供给 SSH 客户端，这样用户只需要在将私钥加入 SSH agent 缓存的时候输入一次密码短语就可以了。</p>
<p>首先确保当前 SSH agent 可用：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># start the ssh-agent in the background</span><br><span class="line">$ eval "$(ssh-agent -s)"</span><br><span class="line">Agent pid 29393</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="ssh-add"><a href="#ssh-add" class="headerlink" title="ssh-add"></a>ssh-add</h2><p>添加 SSH 密钥到 SSH agent：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br><span class="line">Enter passphrase for /home/username/.ssh/id_rsa:</span><br><span class="line">Identity added: /home/username/.ssh/id_rsa (/home/username/.ssh/id_rsa)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="查看-SSH-agent-缓存密钥列表"><a href="#查看-SSH-agent-缓存密钥列表" class="headerlink" title="查看 SSH agent 缓存密钥列表"></a>查看 SSH agent 缓存密钥列表</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ ssh-add -l</span><br><span class="line">2048 b9:a7:f0:44:a5:47:79:a5:ff:9d:14:5c:d3:78:04:65 /home/username/.ssh/id_rsa (RSA)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><p>将 SSH 公钥添加到 SSH 服务端后，就可以使用 SSH 来连接远程主机了。下面以 GitHub为例测试连接：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi username! You've successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>这说明连接成功了。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vYXJ0aWNsZXMvZ2VuZXJhdGluZy1zc2gta2V5cy8=" title="generating ssh keys">Generating SSH keys<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QYXNzcGhyYXNlJTIwUGFzc3BocmFzZQ==">Passphrase(维基百科)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYWVtb24zNjkuZ2l0aHViLmlvL3NzaC8yMDE1LzAzLzA4LyUyMmh0dHBzOi8vd2lraS5hcmNobGludXgub3JnL2luZGV4LnBocC9TU0hfS2V5c18oJUU3JUFFJTgwJUU0JUJEJTkzJUU0JUI4JUFEJUU2JTk2JTg3KSUyMg==" title="SSH Keys(简体中文)">SSH Keys(简体中文)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Tc2gtYWdlbnQlMjBzc2gtYWdlbnQ=">ssh-agent<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL3lldW5nZWVrLmNvbS8yMDE0LzA2LzI2L0dpdCVFNSVBNCU5QSVFNSVCOCU5MCVFNSU4RiVCNyVFOSU4NSU4RCVFNyVCRCVBRS8lMjBHaXQlRTUlQTQlOUElRTUlQjglOTAlRTUlOEYlQjclRTklODUlOEQlRTclQkQlQUU=">Git多帐号配置<i class="fa fa-external-link-alt"></i></span></p>
</body></html>]]></content>
      <categories>
        <category>SSH</category>
      </categories>
      <tags>
        <tag>全栈开发</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>前端应该怎么排查未知问题？？？</title>
    <url>//2024/09/04/%E5%89%8D%E7%AB%AF%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E6%8E%92%E6%9F%A5%E6%9C%AA%E7%9F%A5%E9%97%AE%E9%A2%98%EF%BC%9F%EF%BC%9F%EF%BC%9F/</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>记录一次前端问题的排查过程，希望对大家有所帮助。</p>
</blockquote>
<span id="more"></span>
<h3 id="正文内容"><a href="#正文内容" class="headerlink" title="正文内容"></a>正文内容</h3><p style="text-indent: 2em;">在前端开发的过程中，未知问题常常如同隐藏在代码海洋中的暗礁，稍不留意就会让我们的项目之船触礁搁浅。今天，我就来分享一次艰难的前端问题排查过程，希望能给大家带来一些启发。</p>

<p><img data-src="/2024/09/04/%E5%89%8D%E7%AB%AF%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E6%8E%92%E6%9F%A5%E6%9C%AA%E7%9F%A5%E9%97%AE%E9%A2%98%EF%BC%9F%EF%BC%9F%EF%BC%9F/1.webp" alt="报错信息"></p>
<p style="text-indent: 2em;">我们的项目在加载一个组件时，出现了部分请求被莫名其妙地 <code style="padding: 2px 5px;">canceled</code> 掉的情况。这一问题的出现让整个项目的运行受到了严重影响，我们必须尽快找到问题的根源并加以解决。</p>
<p style="text-indent: 2em;">一开始，毫无头绪。我检查了网络请求的代码，确保没有错误的配置或者逻辑问题。同时，我们也查看了服务器的响应，期望能从中找到一些线索，但结果却令人失望。</p>
<p style="text-indent: 2em;">在陷入困境后，我决定采用二分法进行排查。二分法是一种常见的问题排查方法，通过逐步注释代码，缩小问题的范围，从而精准定位问题所在。将可能出现问题的代码部分分成两部分，然后分别注释掉其中一部分，观察问题是否依然存在。如果问题消失，那么问题就在被注释掉的那部分代码中；如果问题仍然存在，那么问题就在另一部分代码中。通过不断重复这个过程，我们可以逐步缩小问题的范围，最终找到问题的根源。</p>
<p style="text-indent: 2em;">我开始了漫长而艰苦的排查过程。每次注释一部分代码，观察问题是否得到解决。这个过程需要极大的耐心和细心，因为稍有不慎就可能错过问题的关键所在。经过多次尝试，我终于将问题的范围缩小到了一个特定的组件上。</p>
<p style="text-indent: 2em;">然而，即使确定了问题所在的组件，我仍然不知道具体的问题原因。我仔细检查了这个组件的代码，逐行分析每一个函数和方法的调用，但仍然没有发现任何与请求被 <code style="padding: 2px 5px;">canceled</code> 有关的线索。</p>
<p style="text-indent: 2em;">在继续深入排查的过程中，我开始考虑其他可能的因素。浏览器为什么会主动 <code style="padding: 2px 5px;">canceled</code> 请求呢？查阅了相关的文档和资料，了解到浏览器在某些情况下会主动 <code style="padding: 2px 5px;">canceled</code> 请求，以提高性能和用户体验。例如，如果一个请求长时间没有响应，浏览器可能会主动 <code style="padding: 2px 5px;">canceled</code> 这个请求。或者，如果页面正在进行导航，浏览器也可能会 <code style="padding: 2px 5px;">canceled</code>ed 正在进行的请求。</p>
<p style="text-indent: 2em;">但是，这些情况似乎都与我们遇到的问题不符。我们的请求并不是因为长时间没有响应而被 <code style="padding: 2px 5px;">canceled</code>，也不是因为页面正在进行导航而被 <code style="padding: 2px 5px;">canceled</code> 经过进一步的思考和分析，我决定再次回到代码中，从不同的角度进行排查。我开始检查这个组件的生命周期函数，看是否有一些特殊的操作可能导致请求被 <code style="padding: 2px 5px;">canceled</code>。终于，在仔细检查了这个组件的生命周期函数后，发现了一个可能导致问题的地方。</p>
<p style="text-indent: 2em;">原来，这个组件在初始化时，调用了 <code style="padding: 2px 5px;">stop()</code> 方法。但是这个方法并没有在此组件内定义，转而调用了<code style="padding: 2px 5px;">window</code>上的 <code style="padding: 2px 5px;">stop</code> 函数，这个函数的作用是停止当前文档的所有加载进程。在正常情况下，这个函数可以用来停止一些不必要的加载，以提高性能和用户体验。但是，如果在不恰当的地方调用这个方法，就可能会导致一些问题。</p>
<p style="text-indent: 2em;">我们立即修复了这个问题，将错误的调用移除或者放在合适的地方。再次测试后，发现问题得到了解决，所有的请求都能够正常加载了，项目也恢复了正常运行。</p>
<p style="text-indent: 2em;">通过这次问题的排查，深刻体会到了前端问题排查的复杂性和挑战性。同时，也学到了很多宝贵的经验。首先，当遇到未知问题时，不要慌张，要冷静分析问题，选择合适的排查方法。二分法是一种非常有效的排查方法，可以帮助我们快速缩小问题的范围。其次，要对浏览器的行为和特性有深入的了解，这样才能更好地理解问题的本质。最后，要保持耐心和细心，不放过任何一个可能的线索，直到找到问题的根源并加以解决。</p>
<p style="text-indent: 2em;">总之，前端开发中未知问题的排查是一个不断探索和尝试的过程。只有不断积累经验，掌握正确的方法，我们才能在遇到问题时迅速做出反应，有效地解决问题，确保项目的顺利进行。</p>

<h3 id="排查步骤"><a href="#排查步骤" class="headerlink" title="排查步骤"></a>排查步骤</h3><ul>
<li>打开控制台</li>
<li>检查网络请求，看是否有请求被<code style="padding: 2px 5px;">canceled</code>的情况</li>
<li>检查代码逻辑，看是否有可能导致请求被<code style="padding: 2px 5px;">canceled</code>的地方</li>
<li>检查代码依赖，看是否有依赖问题导致的问题</li>
</ul>
<h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dpbmRvdy9zdG9w">stop 方法介绍<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly90aHp0LmdpdGh1Yi5pby8yMDE3LzExLzI4L2Jpc2VjdGlvbi1tZXRob2Qv">使用二分法排查问题<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTIwMDk0MjMvd2hhdC1kb2VzLXN0YXR1cy1jYW5jZWxlZC1mb3ItYS1yZXNvdXJjZS1tZWFuLWluLWNocm9tZS1kZXZlbG9wZXItdG9vbHM=">What does status=canceled for a resource mean in Chrome Developer Tools?<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</body></html>]]></content>
      <categories>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>Javascript</tag>
        <tag>问题排查</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题整理</title>
    <url>//2020/04/17/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<html><head></head><body><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>本人并不是技术大牛(但是会一直朝着那个方向前进)，本文会分享一些本人在面试过程中遇到的一些比较有意思的前端面试题目，如有不对之处还请各位巨牛批评指正！</p>
</blockquote>
<span id="more"></span>

<h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Q-使用promise封装一个readfile函数-？"><a href="#Q-使用promise封装一个readfile函数-？" class="headerlink" title="Q: 使用promise封装一个readfile函数 ？"></a>Q: 使用promise封装一个readfile函数 ？</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pReadFile</span>(<span class="params">filePath</span>){</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>){</span><br><span class="line">  fs.<span class="title function_">readFile</span>(filePath,<span class="string">'utf8'</span>,<span class="keyword">function</span>(<span class="params">err,data</span>){</span><br><span class="line">    <span class="keyword">if</span>(err){</span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="title function_">resolve</span>(data)</span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line"> })</span><br><span class="line">}</span><br><span class="line"><span class="title function_">pReadFile</span>(<span class="string">'./data/a.txt'</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>){</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">pReadFile</span>(<span class="string">'./data/b.txt'</span>)</span><br><span class="line">  })</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>){</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">pReadFile</span>(<span class="string">'./data/c.txt'</span>)</span><br><span class="line">  })</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>){</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q：去除连续重复字符串？例：abcdaaabcd-输出abcdabcd-？"><a href="#Q：去除连续重复字符串？例：abcdaaabcd-输出abcdabcd-？" class="headerlink" title="Q：去除连续重复字符串？例：abcdaaabcd 输出abcdabcd ？"></a>Q：去除连续重复字符串？例：abcdaaabcd 输出abcdabcd ？</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">str_</span> (<span class="params">str</span>) {</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">''</span></span><br><span class="line">  <span class="keyword">if</span> (str != <span class="string">''</span>) {</span><br><span class="line">    result = str[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; str.<span class="property">length</span>; i++) {</span><br><span class="line">      <span class="keyword">if</span> (str[i] != str[i - <span class="number">1</span>]) {</span><br><span class="line">        result += str[i];</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> result = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-正则将电话号码中间四位变成-号-？"><a href="#Q-正则将电话号码中间四位变成-号-？" class="headerlink" title="Q: 正则将电话号码中间四位变成#号 ？"></a>Q: 正则将电话号码中间四位变成#号 ？</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 方式 1： 正则分组</span></span><br><span class="line"><span class="keyword">let</span> phone = <span class="string">"18180800880"</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(\d{3})\d{4}(\d{4})/</span></span><br><span class="line">phone.<span class="title function_">replace</span>(reg,<span class="string">"$1****$2"</span>)</span><br><span class="line"><span class="comment">// 181****0880</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式 2：字符串截取</span></span><br><span class="line">phone.<span class="title function_">substr</span>(<span class="number">0</span>,<span class="number">3</span>) + <span class="string">"****"</span> + phone.<span class="title function_">substr</span>(<span class="number">7</span>);</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-查看下列代码运行结果-？"><a href="#Q-查看下列代码运行结果-？" class="headerlink" title="Q: 查看下列代码运行结果 ？"></a>Q: 查看下列代码运行结果 ？</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> {</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'1'</span>)</span><br><span class="line">  },<span class="number">0</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'222'</span>)</span><br><span class="line">} <span class="keyword">catch</span>(error) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'333'</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 执行try块中代码，然后执行宏任务代码，</span></span><br><span class="line"><span class="comment">// 将异步任务放到队列中，当宏任务队列执行时抛出异常，但是不会走到catch中</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-写出下列代码运行打印结果-？"><a href="#Q-写出下列代码运行打印结果-？" class="headerlink" title="Q: 写出下列代码运行打印结果 ？"></a>Q: 写出下列代码运行打印结果 ？</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="keyword">function</span>(<span class="params"></span>) { <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>) };</span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) {</span><br><span class="line">  foo = <span class="number">10</span>  <span class="comment">// 由于foo在函数中只为可读，因此赋值无效</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(foo)</span><br><span class="line">}())</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-数组拆解-flat-1-a-1-3-–-1-a-1-3-？"><a href="#Q-数组拆解-flat-1-a-1-3-–-1-a-1-3-？" class="headerlink" title="Q: 数组拆解: flat: [1,[{a:1},3]] –> [1, {a: 1}, 3] ？"></a>Q: 数组拆解: flat: [1,[{a:1},3]] –&gt; [1, {a: 1}, 3] ？</h4><ul>
<li>方式 1，缺陷如果元素是对象会报错</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">flat</span> = <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">','</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> +item )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>方式 2，es6数组新扩展，参数是维度，可填写无穷大</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>]].<span class="title function_">flat</span>(<span class="number">1</span>) ==&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>方式 3，reduce 和 concat</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,{<span class="attr">sas</span>: <span class="string">'222'</span>},<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flattenDeep</span>(<span class="params">arr1</span>) {</span><br><span class="line">  <span class="keyword">return</span> arr1.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(val) ? acc.<span class="title function_">concat</span>(<span class="title function_">flattenDeep</span>(val)) : acc.<span class="title function_">concat</span>(val), []);</span><br><span class="line">}</span><br><span class="line"><span class="title function_">flattenDeep</span>(arr1);</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-写一个函数输出：-‘a’-‘b’-‘c’-‘d’-a-b-c-‘d’-？"><a href="#Q-写一个函数输出：-‘a’-‘b’-‘c’-‘d’-a-b-c-‘d’-？" class="headerlink" title="Q: 写一个函数输出： [‘a’, ‘b’, ‘c’, ‘d’] => { a: { b: { c: ‘d’ } } } ？"></a>Q: 写一个函数输出： [‘a’, ‘b’, ‘c’, ‘d’] =&gt; { a: { b: { c: ‘d’ } } } ？</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">to_</span>(<span class="params">arr</span>) {</span><br><span class="line">  <span class="keyword">const</span> _arr = arr.<span class="title function_">reverse</span>()</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(_arr)) <span class="keyword">return</span> {};</span><br><span class="line">  <span class="keyword">return</span> _arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">item, cur, index, arr</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) {</span><br><span class="line">      item = {</span><br><span class="line">        [arr[index + <span class="number">1</span>]]: cur</span><br><span class="line">      };</span><br><span class="line">      <span class="keyword">return</span> item</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">1</span>) <span class="keyword">return</span> item;</span><br><span class="line">    item = { [cur]: item };</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  }, {})</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-封装一个Array-filter方法-？"><a href="#Q-封装一个Array-filter方法-？" class="headerlink" title="Q: 封装一个Array.filter方法 ？"></a>Q: 封装一个Array.filter方法 ？</h4><ul>
<li>1.使用Array.reduce方法封装，还有其他方法，希望大家帮忙补充！</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Filter</span>(<span class="params">arr, callback</span>) {</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">item, cur, index, arr</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">callback</span>(cur, index, arr)) item.<span class="title function_">push</span>(cur)</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  }, [])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-什么是防抖和节流？有什么区别？如何实现-？"><a href="#Q-什么是防抖和节流？有什么区别？如何实现-？" class="headerlink" title="Q: 什么是防抖和节流？有什么区别？如何实现 ？"></a>Q: 什么是防抖和节流？有什么区别？如何实现 ？</h4><ul>
<li>防抖</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间</span></span><br><span class="line"><span class="comment">// 思路：每次触发事件时都取消之前的延时调用方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn</span>) {</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="literal">null</span>; <span class="comment">// 创建一个标记用来存放定时器的返回值</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout); <span class="comment">// 每当用户输入的时候把前一个 setTimeout clear 掉</span></span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> { <span class="comment">// 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数</span></span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    }, <span class="number">500</span>);</span><br><span class="line">  };</span><br><span class="line">}</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'防抖成功'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'inp'</span>);</span><br><span class="line">inp.<span class="title function_">addEventListener</span>(<span class="string">'input'</span>, <span class="title function_">debounce</span>(sayHi)); <span class="comment">// 防抖</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>节流</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率</span></span><br><span class="line"><span class="comment">// 思路：每次触发事件时都判断当前是否有等待执行的延时函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn</span>) {</span><br><span class="line">  <span class="keyword">let</span> canRun = <span class="literal">true</span>; <span class="comment">// 通过闭包保存一个标记</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">if</span> (!canRun) <span class="keyword">return</span>; <span class="comment">// 在函数开头判断标记是否为true，不为true则return</span></span><br><span class="line">    canRun = <span class="literal">false</span>; <span class="comment">// 立即设置为false</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> { <span class="comment">// 将外部传入的函数的执行放在setTimeout中</span></span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      <span class="comment">// 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉</span></span><br><span class="line">      canRun = <span class="literal">true</span>;</span><br><span class="line">    }, <span class="number">500</span>);</span><br><span class="line">  };</span><br><span class="line">}</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">e</span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">innerWidth</span>, e.<span class="property">target</span>.<span class="property">innerHeight</span>);</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">'resize'</span>, <span class="title function_">throttle</span>(sayHi));</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-创建一个从1——5数组-？"><a href="#Q-创建一个从1——5数组-？" class="headerlink" title="Q: 创建一个从1——5数组 ？"></a>Q: 创建一个从1——5数组 ？</h4><ul>
<li>字面量</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>方法</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">'12345'</span>).<span class="title function_">map</span>(<span class="function"><span class="params">e</span>=&gt;</span> <span class="title class_">Number</span>(e))</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>(<span class="number">5</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">e,index</span>)=&gt;</span>{</span><br><span class="line">  <span class="keyword">return</span> index + <span class="number">1</span></span><br><span class="line">})</span><br><span class="line"><span class="keyword">const</span> arr = [...<span class="title class_">Array</span>(<span class="number">5</span>)].<span class="title function_">map</span>(<span class="function">(<span class="params">e,i</span>)=&gt;</span> i+ <span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> arr = <span class="string">'12345'</span>.<span class="title function_">split</span>(<span class="string">''</span>).<span class="title function_">map</span>(<span class="function"><span class="params">e</span>=&gt;</span> <span class="title class_">Number</span>(e))</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>(<span class="number">5</span>).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">e,i</span>)=&gt;</span> i+ <span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">5</span>))</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">e,i</span>)=&gt;</span>{</span><br><span class="line">  arr.<span class="title function_">fill</span>(i + <span class="number">1</span>,i, i + <span class="number">1</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-给定一个整数数组-nums-和一个目标值-target-，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标-？"><a href="#Q-给定一个整数数组-nums-和一个目标值-target-，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标-？" class="headerlink" title="Q: 给定一个整数数组 nums 和一个目标值 target ，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标 ？"></a>Q: 给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code> ，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标 ？</h4><ul>
<li>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 给定 nums = [2, 7, 11, 15], target = 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为 nums[0] + nums[1] = 2 + 7 = 9</span></span><br><span class="line"><span class="comment">// 所以返回 [0, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>],</span><br><span class="line">      target = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSumIndex</span>(<span class="params">arr1, sum</span>) {</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; arr1.<span class="property">length</span>) {</span><br><span class="line">    <span class="keyword">const</span> j = arr1.<span class="title function_">slice</span>(i + <span class="number">1</span>).<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span> =&gt;</span> arr1[i] + item === sum);</span><br><span class="line">    <span class="keyword">if</span> (j !== -<span class="number">1</span>) {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>([i, i + <span class="number">1</span> + j]);</span><br><span class="line">      <span class="keyword">return</span> [i, i + <span class="number">1</span> + j];</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      i++;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"[]"</span>);</span><br><span class="line">  <span class="keyword">return</span> [];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getSumIndex = <span class="keyword">function</span>(<span class="params">nums, target</span>) {</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; nums.<span class="property">length</span>; i++) {</span><br><span class="line">        <span class="keyword">let</span> k = target-nums[i]</span><br><span class="line">        <span class="keyword">if</span>(map.<span class="title function_">has</span>(k)) {</span><br><span class="line">            <span class="keyword">return</span> [map.<span class="title function_">get</span>(k), i]</span><br><span class="line">        }</span><br><span class="line">        map.<span class="title function_">set</span>(nums[i], i)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">getSumIndex</span>(nums, target);</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>附leetcode地址：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHdvLXN1bS9zb2x1dGlvbi9xaWFuLWR1YW4tamluLWppZS1zdWFuLWZhLWxpYW5nLXNodS16aGktaGUtYnktdXNlci8=">leetcode<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h4 id="Q-4-3-2-7-8-2-3-1-2-3-4-5-3-8-2-3-4-8-？"><a href="#Q-4-3-2-7-8-2-3-1-2-3-4-5-3-8-2-3-4-8-？" class="headerlink" title="Q: [4,3,2,7,8,2,3,1,2,3,4,5,3,8] ==>  [2,3,4,8] ？"></a>Q: [4,3,2,7,8,2,3,1,2,3,4,5,3,8] ==&gt;  [2,3,4,8] ？</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handlerData</span> (<span class="params">arr</span>) {</span><br><span class="line">  <span class="keyword">let</span> obj = {}</span><br><span class="line">  <span class="keyword">if</span>(!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) <span class="keyword">return</span> []</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">item,cur</span>)=&gt;</span>{</span><br><span class="line">    <span class="keyword">if</span>(obj[cur]) {</span><br><span class="line">      obj[cur] += <span class="number">1</span></span><br><span class="line">      <span class="comment">// 其实这两还可以使用new Set</span></span><br><span class="line">      <span class="keyword">if</span>(!item.<span class="title function_">includes</span>(cur)) {</span><br><span class="line">      	item.<span class="title function_">push</span>(cur)</span><br><span class="line">      }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">	  obj[cur] = <span class="number">1</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line">  },[])</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-let、const、var区别"><a href="#Q-let、const、var区别" class="headerlink" title="Q: let、const、var区别 ?"></a>Q: let、const、var区别 ?</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 查看下列输出</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) {</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> d = <span class="number">5</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);  <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);  <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-实现一个new、bind、apply、call方法"><a href="#Q-实现一个new、bind、apply、call方法" class="headerlink" title="Q: 实现一个new、bind、apply、call方法 ?"></a>Q: 实现一个new、bind、apply、call方法 ?</h4><ul>
<li>实现new关键字</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newObj</span>(<span class="params">Obj, ...args</span>) {</span><br><span class="line">  <span class="comment">// 创建对象</span></span><br><span class="line">  <span class="keyword">let</span> newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>({})</span><br><span class="line">  <span class="comment">// 将传入的构造函数原型赋值给新创建的对象的原型链上</span></span><br><span class="line">  newObj.<span class="property">__proto__</span> = <span class="title class_">Obj</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">  <span class="comment">// 改变this指向</span></span><br><span class="line">  <span class="title class_">Obj</span>.<span class="title function_">apply</span>(newObj, args)</span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">objectFactory</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="comment">// 创建对象</span></span><br><span class="line">  <span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(),</span><br><span class="line">  <span class="comment">// 获取传入参数第一个为要new的构造函数</span></span><br><span class="line">  <span class="title class_">Constructor</span> = [].<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  obj.<span class="property">__proto__</span> = <span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="comment">// this转向</span></span><br><span class="line">  <span class="keyword">const</span> ret = <span class="title class_">Constructor</span>.<span class="title function_">apply</span>(obj, <span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> ret === <span class="string">'object'</span> ? ret : obj;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>实现call和apply方法</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// call</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call_</span> = <span class="keyword">function</span>(<span class="params">...args</span>) {</span><br><span class="line">  <span class="keyword">const</span> context = args[<span class="number">0</span>] || <span class="variable language_">window</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> args_ = args.<span class="property">length</span> &gt; <span class="number">1</span> ? args.<span class="title function_">splice</span>(<span class="number">1</span>) : args</span><br><span class="line">  context.<span class="title function_">fn</span>(...args_)</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// apply</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">apply_</span> = <span class="keyword">function</span>(<span class="params">...args</span>) {</span><br><span class="line">  <span class="keyword">const</span> context = args[<span class="number">0</span>] || <span class="variable language_">window</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> args_ = args.<span class="property">length</span> &gt; <span class="number">1</span> ? args.<span class="title function_">splice</span>(<span class="number">1</span>) : args</span><br><span class="line">  context.<span class="title function_">fn</span>(args_)</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>实现bind方法</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind2</span> = <span class="keyword">function</span> (<span class="params">...args</span>) {</span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args_</span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span> = self.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">return</span> self.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args.<span class="title function_">concat</span>(args_));</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-实现一下-element-js"><a href="#Q-实现一下-element-js" class="headerlink" title="Q: 实现一下 element.js ?"></a>Q: 实现一下 element.js ?</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="keyword">new</span> <span class="built_in">require</span>(<span class="string">'./element.js'</span>)；</span><br><span class="line"><span class="keyword">const</span> ul = <span class="title function_">el</span>(<span class="string">'ul'</span>, {<span class="attr">id</span>: <span class="string">'list'</span>}, [</span><br><span class="line">  <span class="title function_">el</span>(<span class="string">'li'</span>, {<span class="attr">class</span>: <span class="string">'item'</span>}, [<span class="string">'Item 1'</span>]),</span><br><span class="line">  <span class="title function_">el</span>(<span class="string">'li'</span>, {<span class="attr">class</span>: <span class="string">'item'</span>}, [<span class="string">'Item 2'</span>]),</span><br><span class="line">  <span class="title function_">el</span>(<span class="string">'li'</span>, {<span class="attr">class</span>: <span class="string">'item'</span>}, [<span class="string">'Item 3'</span>])</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> ulRoot = ul.<span class="title function_">render</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ulRoot);</span><br><span class="line"></span><br><span class="line"><span class="comment">// dom输出：</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">'list'</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现方案</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">El</span> {</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">el, attr, children</span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = <span class="variable language_">this</span>.<span class="title function_">handlerData</span>({ el, attr, children })</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  }</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 创建VDom元素</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">createdElement</span>(<span class="variable language_">this</span>.<span class="property">data</span>)</span><br><span class="line">  }</span><br><span class="line">  <span class="title function_">createdElement</span>(<span class="params">{ el, attr, children }</span>) {</span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(el)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> attr === <span class="string">'object'</span> &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">keys</span>(attr).<span class="property">length</span> &gt; <span class="number">0</span>) {</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(attr)) {</span><br><span class="line">        <span class="keyword">if</span> (key) {</span><br><span class="line">          node[key] = <span class="variable language_">this</span>.<span class="title function_">handlerAttr</span>(node, key, attr[key])[key]</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(children)) {</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> children) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">'object'</span>) {</span><br><span class="line">          node.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="title function_">createdElement</span>(item.<span class="property">data</span>))</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">          <span class="keyword">const</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">'span'</span>)</span><br><span class="line">          textNode.<span class="property">innerHTML</span> = item</span><br><span class="line">          node.<span class="title function_">appendChild</span>(textNode)</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  }</span><br><span class="line">  <span class="title function_">handlerAttr</span>(<span class="params">node, key, value</span>) {</span><br><span class="line">    <span class="keyword">let</span> obj = {</span><br><span class="line">      <span class="title function_">style</span>(<span class="params">value_</span>) {</span><br><span class="line">        node.<span class="property">style</span> = value_</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">      },</span><br><span class="line">      <span class="title function_">class</span>(<span class="params">value_</span>) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value_ === <span class="string">'string'</span>) {</span><br><span class="line">          node.<span class="property">classList</span>.<span class="title function_">add</span>(value_)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">      },</span><br><span class="line">      <span class="comment">// 直接赋值操作</span></span><br><span class="line">      <span class="title function_">miss</span>(<span class="params">value_</span>) {</span><br><span class="line">        node[key] = value_</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> obj[key] ? obj[key](value) : obj[<span class="string">'miss'</span>](value)</span><br><span class="line">  }</span><br><span class="line">  <span class="title function_">handlerData</span>(<span class="params">{ el, attr, children }</span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      el, attr, children</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-请写出格式化以下字符串的函数？"><a href="#Q-请写出格式化以下字符串的函数？" class="headerlink" title="Q: 请写出格式化以下字符串的函数？"></a>Q: 请写出格式化以下字符串的函数？</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 将字符串"I'm?$$$driving$??$to$?beijing$?$$after$breakfast"格式化为"I'm driving to Beijing after breakfast"</span></span><br><span class="line"><span class="comment">// 1.我们需要的内容只有大小写英文字母和“'”这个单引号</span></span><br><span class="line"><span class="comment">// 2.假如乱码特殊字符的最后一位是=== "?"，则他的下一位如果是字母肯定为大写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">str</span>) {</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(str).<span class="title function_">reduce</span>(<span class="function">(<span class="params">item,cur,_index,arr</span>)=&gt;</span>{</span><br><span class="line">    <span class="keyword">if</span>(cur === <span class="string">'$'</span> &amp;&amp; arr[_index + <span class="number">1</span>] === <span class="string">'?'</span> &amp;&amp; <span class="regexp">/[A-Za-z]/g</span>.<span class="title function_">test</span>(arr[_index + <span class="number">2</span>])) {</span><br><span class="line">      index = _index + <span class="number">2</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(cur === <span class="string">'$'</span> || cur === <span class="string">'?'</span>) {</span><br><span class="line">      item += <span class="string">' '</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">if</span>( index === _index) {</span><br><span class="line">        item += cur.<span class="title function_">toUpperCase</span>()</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        item += cur</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> item.<span class="title function_">replace</span>(<span class="regexp">/(\s)+/g</span>,<span class="string">'$1'</span>) <span class="comment">// 替换重复空格</span></span><br><span class="line">  },<span class="string">''</span>)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-实现一下-on-off-emit-？"><a href="#Q-实现一下-on-off-emit-？" class="headerlink" title="Q: 实现一下$on/$off/$emit ？"></a>Q: 实现一下$on/$off/$emit ？</h4><ul>
<li>就是让我们实现下vue的订阅者模式，其实双向绑定也是这样实现的！</li>
<li>这三个函数主要依赖的是一个大的依赖收集器来做的！（PS：具体实现请看下边！）</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">dep</span> {</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// 因为订阅者有n个并且实现逻辑都不一样，所以采用对象数组形式</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = {}</span><br><span class="line">  }</span><br><span class="line">  <span class="title function_">getType</span>(<span class="params">val</span>) {</span><br><span class="line">    <span class="comment">// 不区分大小写</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(val);</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^\[Object ?(.*)\]$/i</span>.<span class="title function_">exec</span>(str)[<span class="number">1</span>].<span class="title function_">toLowerCase</span>()</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 订阅者</span></span><br><span class="line">  $on(eventName, callback) {</span><br><span class="line">    <span class="keyword">if</span> (!eventName) {</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'event name can\'t empty'</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">getType</span>(eventName) === <span class="string">'string'</span>) {</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Reflect</span>.<span class="title function_">has</span>(<span class="variable language_">this</span>.<span class="property">events</span>, eventName) &amp;&amp; <span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="variable language_">this</span>.<span class="property">events</span>[eventName])) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">push</span>(callback)</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        <span class="title class_">Reflect</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="property">events</span>, eventName, [callback])</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">getType</span>(eventName) === <span class="string">'array'</span>) {</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> eventName) {</span><br><span class="line">        <span class="variable language_">this</span>.$on(item, callback)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 订阅注销</span></span><br><span class="line">  $off(eventName, callback) {</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> &lt;= <span class="number">0</span>) {</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (eventName &amp;&amp; !callback) {</span><br><span class="line">      <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(<span class="variable language_">this</span>.<span class="property">events</span>, eventName)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (callback) {</span><br><span class="line">      <span class="keyword">if</span>(!<span class="title class_">Reflect</span>.<span class="title function_">has</span>(<span class="variable language_">this</span>.<span class="property">events</span>, eventName)) {</span><br><span class="line">        <span class="variable language_">this</span>.$on(eventName, callback)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">let</span> cbs = <span class="variable language_">this</span>.<span class="property">events</span>[eventName]</span><br><span class="line">      <span class="keyword">let</span> i = cbs.<span class="property">length</span></span><br><span class="line">      <span class="keyword">while</span> (i--) {</span><br><span class="line">        <span class="keyword">let</span> cb = cbs[i]</span><br><span class="line">        <span class="comment">// cb.fn === fn 针对once绑定的事件</span></span><br><span class="line">        <span class="keyword">if</span> (cb === callback || cb.<span class="property">fn</span> === callback) {</span><br><span class="line">          cbs.<span class="title function_">splice</span>(i, <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 通知订阅</span></span><br><span class="line">  $emit(eventName, ...args) {</span><br><span class="line">    <span class="keyword">if</span> (!eventName || (<span class="variable language_">this</span>.<span class="title function_">getType</span>(eventName) !== <span class="string">'string'</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">getType</span>(eventName) !== <span class="string">'array'</span>)) {</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'event name not a string/array'</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">getType</span>(eventName) === <span class="string">'string'</span>) {</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title class_">Reflect</span>.<span class="title function_">has</span>(<span class="variable language_">this</span>.<span class="property">events</span>, eventName)) {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> cb <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">events</span>[eventName]) {</span><br><span class="line">        cb.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">getType</span>(eventName) === <span class="string">'array'</span>) {</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> eventName_ <span class="keyword">of</span> eventName) {</span><br><span class="line">        <span class="variable language_">this</span>.$emit(eventName_, ...args)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Q-数据结构（栈和堆）和数据类型"><a href="#Q-数据结构（栈和堆）和数据类型" class="headerlink" title="Q: 数据结构（栈和堆）和数据类型 ?"></a>Q: 数据结构（栈和堆）和数据类型 ?</h4><ul>
<li>基本数据类型<ul>
<li>js基本数据类型包括：undefined,null,number,boolean,string.基本数据类型是按值访问的，就是说我们可以操作保存在变量中的实际的值</li>
<li>基本数据类型的值是不可变的</li>
<li>基本数据类型不可以添加属性和方法</li>
<li>基本数据类型的赋值是简单赋值</li>
<li>基本数据类型的比较是值的比较</li>
<li>基本数据类型是存放在栈区的</li>
</ul>
</li>
<li>引用类型<ul>
<li>引用类型的值是可以改变的</li>
<li>引用类型可以添加属性和方法</li>
<li>引用类型的赋值是对象引用</li>
<li>引用类型的比较是引用的比较</li>
<li>引用类型是同时保存在栈区和堆区中的</li>
</ul>
</li>
<li>基本包装类型(包装对象)</li>
<li>参考资料： <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwODQ3MjI2NA==">基本数据类型和引用类型的区别详解<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><h4 id="Q-弹性盒子中-flex-0-1-auto-表示什么意思"><a href="#Q-弹性盒子中-flex-0-1-auto-表示什么意思" class="headerlink" title="Q:弹性盒子中 flex: 0 1 auto 表示什么意思?"></a>Q:弹性盒子中 <code>flex: 0 1 auto</code> 表示什么意思?</h4><figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">三个参数分别对应的是 flex-grow, flex-shrink 和 flex-basis，默认值为0 1 auto。</span><br><span class="line">  1.flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</span><br><span class="line">  2.flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</span><br><span class="line">  3.flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。</span><br></pre></td></tr></tbody></table></figure>

<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><h4 id="Q-webpack-中-loader-和-plugin-的区别是什么"><a href="#Q-webpack-中-loader-和-plugin-的区别是什么" class="headerlink" title="Q: webpack 中 loader 和 plugin 的区别是什么 ?"></a>Q: <code>webpack</code> 中 <code>loader</code> 和 <code>plugin</code> 的区别是什么 ?</h4><ul>
<li>这里引用官方文档原文：</li>
</ul>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">While loaders are used to transform certain types of modules, plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables.</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>网友解释</li>
</ul>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line"># loader:让webpack能够处理非js文件(自身职能理解js)，然后你就可以利用 webpack 的打包能力，对它们进行处理。</span><br><span class="line">  例如：css-loader、style-loader、postcss-loader、sass-loader</span><br><span class="line"></span><br><span class="line"># plugins:从打包优化和压缩，一直到重新定义环境中的变量.</span><br><span class="line">  例如：uglify-webpack-plugin、clean-webpack-plugin、babel-polyfill</span><br><span class="line"></span><br><span class="line"># 相对于loader转换指定类型的模块功能，plugins能够被用于执行更广泛的任务比如打包优化、文件管理、环境注入等……</span><br><span class="line"></span><br><span class="line"># webpack 是由nodejs编写的前端资源加载/打包工具，由nodejs提供了强大的文件处理，IO能力。</span><br><span class="line">  loader: 是一个nodejs 函数模块， 传入resource file 或者sourceMap json 结果，读取文件，将文件处理为String 或者 Buffer 格式，然后传给compiler 或者下一个loader.</span><br><span class="line">  plugin: 是能够参与到compilation process的自定义函数，通过hook到每一个编译（compiler）中，触发关键事件或处理。</span><br><span class="line"></span><br><span class="line"># 如何自定义webpack插件：</span><br><span class="line"></span><br><span class="line"># JavaScript 命名函数</span><br><span class="line">  在插件函数prototype 上定义一个apply 方法</span><br><span class="line">  定义一个绑定到webpack 自身的hook</span><br><span class="line">  处理webpack内部特定数据</span><br><span class="line">  功能完成后调用webpack 提供的回调</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">一、webpack的打包原理</span><br><span class="line"></span><br><span class="line">  识别入口文件</span><br><span class="line">  通过逐层识别模块依赖(Commonjs、amd或者es6的import，webpack都会对其进行分析，来获取代码的依赖)</span><br><span class="line">  webpack做的就是分析代码，转换代码，编译代码，输出代码</span><br><span class="line">  最终形成打包后的代码</span><br><span class="line">二、什么是loader</span><br><span class="line"></span><br><span class="line">  loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中处理一个文件可以使用多个loader，loader的执行顺序和配置中的顺序是相反的，即最后一个loader最先执行，第一个loader最后执行，第一个执行的loader接收源文件内容作为参数，其它loader接收前一个执行的loader的返回值作为参数，最后执行的loader会返回此模块的JavaScript源码</span><br><span class="line"></span><br><span class="line">三、什么是plugin</span><br><span class="line"></span><br><span class="line">  在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的API改变输出结果。</span><br><span class="line"></span><br><span class="line">四、loader和plugin的区别</span><br><span class="line"></span><br><span class="line">  对于loader，它是一个转换器，将A文件进行编译形成B文件，这里操作的是文件，比如将A.scss转换为A.css，单纯的文件转换过程</span><br><span class="line">  plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务</span><br></pre></td></tr></tbody></table></figure>

<h3 id="网络请求方面"><a href="#网络请求方面" class="headerlink" title="网络请求方面"></a>网络请求方面</h3><h4 id="Q-谈谈-cookie、localStorage-以及-sessionStorage-区别，以及cookie-为什么不建议用"><a href="#Q-谈谈-cookie、localStorage-以及-sessionStorage-区别，以及cookie-为什么不建议用" class="headerlink" title="Q: 谈谈 cookie、localStorage 以及 sessionStorage 区别，以及cookie 为什么不建议用"></a>Q: 谈谈 cookie、localStorage 以及 sessionStorage 区别，以及cookie 为什么不建议用</h4><ul>
<li>三者的异同：上面的使用方式说好了，下面就唠唠三者之间的区别，这个问题其实很多大厂面试的时候也都会问到，所以可以注意一下这几个之间的区别。生命周期：cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效localStorage：除非被手动清除，否则将会永久保存。</li>
<li>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</li>
<li>存放数据大小：cookie：4KB左右</li>
<li>localStorage和sessionStorage：可以保存5MB的信息。</li>
<li>http请求：cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</li>
<li>localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信</li>
<li>易用性：cookie：需要程序员自己封装，源生的Cookie接口不友好</li>
<li>localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</li>
<li>应用场景：从安全性来说，因为每次http请求都会携带cookie信息，这样无形中浪费了带宽，所以cookie应该尽可能少的使用，另外cookie还需要指定作用域，不可以跨域调用，限制比较多。但是用来识别用户登录来说，cookie还是比storage更好用的。其他情况下，可以使用storage，就用storage。</li>
<li>storage在存储数据的大小上面秒杀了cookie，现在基本上很少使用cookie了，因为更大总是更好的，哈哈哈你们懂得。</li>
<li>localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来夸页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>Javascript</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行配置代理服务</title>
    <url>//2019/01/29/%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<html><head></head><body><ul>
<li>因为需要通过命令下载国外资源，但在 IE 配置代理后，对 cmd 却没有效果，于是查了下，有配置 cmd 代理的方法。</li>
</ul>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><span id="more"></span>
<ul>
<li>通过设置环境变量来配置代理，一种方式是直接在系统设置中配置（这个就不解释了），另一种方式是在需要时通过 <code>set</code> 命令临时设置。</li>
<li>控制代理的环境变量分别是 http_proxy、http_proxy_user、http_proxy_pass，不区分大小写，分别代表代理地址（应是 <span class="exturl" data-url="aHR0cDovL2lwOnBvcnQ=">http://ip:port<i class="fa fa-external-link-alt"></i></span> 的形式）、代理用户名、代理密码，一般情况下只需要配置 http_proxy 即可（其余两个参数暂无条件测试，是否有作用未知），参数格式大致如下所示。</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">http_proxy=http://localhost:1080</span><br><span class="line">http_proxy_user=zhangsan</span><br><span class="line">http_proxy_pass=lisi</span><br><span class="line">通过 <span class="built_in">set</span> 命令的形式大致如下所示。</span><br></pre></td></tr></tbody></table></figure>

<h4 id="设置参数"><a href="#设置参数" class="headerlink" title="设置参数"></a>设置参数</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://localhost:1080</span><br><span class="line"><span class="built_in">set</span> http_proxy_user=zhangsan</span><br><span class="line"><span class="built_in">set</span> http_proxy_pass=lisi</span><br></pre></td></tr></tbody></table></figure>

<h4 id="删除参数"><a href="#删除参数" class="headerlink" title="删除参数"></a>删除参数</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=</span><br><span class="line"><span class="built_in">set</span> http_proxy_user=</span><br><span class="line"><span class="built_in">set</span> http_proxy_pass=</span><br></pre></td></tr></tbody></table></figure>

<p>另外经测试还有 https_proxy 环境变量可配置，用于配置 https 的代理，如果未配置则将使用 http_proxy 的配置。据此可推测有 https_proxy_user 等参数。</p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul>
<li>因目前没有环境测试，故以下结论仅根据网上资料整理并推测所得，仅做记录和供参考，详见参考资料。</li>
<li>据资料得，Linux 配置方式与 Windows 相似，仅命令及配置方式有所不同。</li>
<li>可配置的环境变量名分别为 http_proxy、https_proxy、ftp_proxy、no_proxy，分别是配置 http 代理、https 代理、ftp 代理、不使用代理的地址，参数格式大致如下所示（正确性有待考察，可能需要加 http:// 前缀），no_proxy 较特殊。</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">http*proxy=192.168.10.91:3128</span><br><span class="line">https_proxy=192.168.10.91:3128</span><br><span class="line">ftp_proxy=192.168.10.91:3128</span><br><span class="line">no_proxy=<span class="string">"127.0.0.1, localhost, 172.26.*, 172.25.6.66, 192.168.\_"</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>在 linux 下也有两种配置方式，一是需要在相关系统文件中配置，二是通过 export 命令临时设置，这里不做详细介绍。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>Windows 和 Linux 的配置方式大致相同，推测 Windows 也有类似 no_proxy 等的配置，鉴于很少用到，故不做深入研究，需要之时可做尝试。</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZXpsb28uY29tLzIwMDgvMTIvc2V0X2h0dHBfcHJveHkuaHRtbA==">命令行配置代理服务器<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy5meDExNC5uZXQvcWEtMTUtMTUzODY3LmFzcHg=">为 windows cmd 设置代理<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cDovL2x5bXJnLmJsb2cuNTFjdG8uY29tLzE1NTEzMjcvNDI1NzQ0">linux 命令行模式下实现代理上网<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy5saW51eGRpeWYuY29tL2xpbnV4LzE0MTkxLmh0bWw=">Ubuntu 设置代理和例外<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>基于CKEditor5的格式化插件</title>
    <url>//2022/08/22/%E5%9F%BA%E4%BA%8ECKEditor5%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<html><head></head><body><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>写该文的起因是为了向大家介绍下基于CKEditor5 开发格式刷插件的思路</p>
<span id="more"></span>
<h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><ul>
<li>实现了文字与段落的属性Copy<br><img data-src="/2022/08/22/%E5%9F%BA%E4%BA%8ECKEditor5%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8F%92%E4%BB%B6/1.gif" alt="image"></li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul>
<li>获取选中元素的 attribute 将其存起来</li>
<li>再次选中时将选中元素的 attribute 通过存起来的属性值将其重置（当然重置可以采用<code>removeFormat</code>插件将元素格式移除）<ul>
<li>当然选中的元素需要判别下文字用文字的方法，段落用段落的方法<br><img data-src="/2022/08/22/%E5%9F%BA%E4%BA%8ECKEditor5%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8F%92%E4%BB%B6/2.png" alt="image"></li>
</ul>
</li>
<li>关于按钮的开启状态可以通过<code>isEnable</code>去设置，通过插件的<code>refresh</code>去刷新开启状态！（P.s 当然这是我们这边的业务工需求，大家可以按实际的业务需求来做）</li>
<li>UI 层的话就直接使用默认的 <code>Button</code> 按钮就好，监听下<code>buttonView</code> 然后执行<code>execute</code></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ja2VkaXRvci5jb20vZG9jcy9ja2VkaXRvcjUvbGF0ZXN0L2FwaS9tb2R1bGVfZW5naW5lX21vZGVsX3NjaGVtYS1BdHRyaWJ1dGVQcm9wZXJ0aWVzLmh0bWw=">文档<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="一些实际代码"><a href="#一些实际代码" class="headerlink" title="一些实际代码"></a>一些实际代码</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否可以开启</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">_checkEnabled</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> { model } = <span class="variable language_">this</span>.<span class="property">editor</span>;</span><br><span class="line">  <span class="keyword">const</span> { schema } = model;</span><br><span class="line">  <span class="keyword">const</span> selectedElements = <span class="title class_">Array</span>.<span class="title function_">from</span>(</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_getNotFormattingItems</span>(model.<span class="property">document</span>.<span class="property">selection</span>, schema)</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> flag = selectedElements.<span class="title function_">some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="title function_">is</span>(<span class="string">"textProxy"</span>) || item.<span class="title function_">is</span>(<span class="string">"text"</span>));</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取不可以参与格式化的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">* <span class="title function_">_getNotFormattingItems</span>(<span class="params">selection, schema</span>) {</span><br><span class="line">  <span class="comment">// Check formatting on selected items that are not blocks.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> curRange <span class="keyword">of</span> selection.<span class="title function_">getRanges</span>()) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> curRange.<span class="title function_">getItems</span>()) {</span><br><span class="line">      <span class="keyword">if</span> (!schema.<span class="title function_">isBlock</span>(item)) {</span><br><span class="line">        <span class="keyword">yield</span> item;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check formatting from selected blocks.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> block <span class="keyword">of</span> selection.<span class="title function_">getSelectedBlocks</span>()) {</span><br><span class="line">    <span class="keyword">if</span> (block) {</span><br><span class="line">      <span class="keyword">yield</span> block;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Finally the selection might be formatted as well, so make sure to check it.</span></span><br><span class="line">  <span class="keyword">if</span> (selection) {</span><br><span class="line">    <span class="keyword">yield</span> selection;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>NPM</tag>
        <tag>CKEditor5</tag>
      </tags>
  </entry>
  <entry>
    <title>多Node环境设置</title>
    <url>//2020/09/12/%E5%A4%9ANode%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<html><head></head><body><p>建议使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NyZWF0aW9uaXgvbnZt">NVM<i class="fa fa-external-link-alt"></i></span> 对<code>Node</code>进行管理，在安装Node之前可以先安装好<code>NVM</code>，下面几种安装方式任选其一即可。</p>
<span id="more"></span>

<h2 id="安装NVM"><a href="#安装NVM" class="headerlink" title="安装NVM"></a><a href="#%E5%AE%89%E8%A3%85NVM" title="安装NVM"></a>安装NVM</h2><ul>
<li><p>curl</p>
<p>curl -o- <span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NyZWF0aW9uaXgvbnZtL3YwLjMzLjAvaW5zdGFsbC5zaA==">https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh<i class="fa fa-external-link-alt"></i></span> | bash</p>
</li>
<li><p>wget</p>
<p>  wget -qO- <span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NyZWF0aW9uaXgvbnZtL3YwLjMzLjAvaW5zdGFsbC5zaA==">https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh<i class="fa fa-external-link-alt"></i></span> | bash</p>
</li>
<li><p><strong>git</strong>（建议这种安装方法，能够获取到最新的NVM版本）</p>
<p>git clone <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NyZWF0aW9uaXgvbnZtLmdpdA==">https://github.com/creationix/nvm.git<i class="fa fa-external-link-alt"></i></span> ~/.nvm &amp;&amp; cd ~/.nvm &amp;&amp; git checkout `git describe –abbrev=0 –tags`</p>
<p>  . ~/.nvm/nvm.sh</p>
</li>
</ul>
<p>上述操作成功之后，打开<code>Terminal</code>输入<code>NVM</code>，若能看到帮助信息说明安装成功。</p>
<h2 id="使用NVM"><a href="#使用NVM" class="headerlink" title="使用NVM"></a><a href="#%E4%BD%BF%E7%94%A8NVM" title="使用NVM"></a>使用NVM</h2><p>安装好 <code>NVM</code> 之后就可以安装指定版本的<code>Node</code>了，假设安装4.2版本的可以执行下面命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nvm install 8.0</span><br></pre></td></tr></tbody></table></figure>

<p><code>NVM</code>可以同时安装多个版本的<code>Node</code>，切换使用也是相当方便，下面命令指定使用4.2版本的：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nvm use 8.0</span><br></pre></td></tr></tbody></table></figure>

<p>查看你安装的<code>Node</code>列表：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nvm <span class="built_in">ls</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>NVM</code>默认从 <span class="exturl" data-url="aHR0cDovL25vZGVqcy5vcmcvZGlzdC8=">http://nodejs.org/dist/<i class="fa fa-external-link-alt"></i></span> 下载资源，速度相对较慢，我们可以切换到国内的源：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/dist</span><br><span class="line"><span class="built_in">source</span> ~/git/nvm/nvm.sh</span><br></pre></td></tr></tbody></table></figure>

<h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a><a href="#NPM" title="NPM"></a>NPM</h2><p><code>NPM</code>作为<code>Node</code>的包管理器，现在是随着<code>Node</code>的安装同时进行安装的，通过<code>NPM</code>可以很方便地对包进行管理。</p>
<h3 id="NPM加速"><a href="#NPM加速" class="headerlink" title="NPM加速"></a><a href="#NPM%E5%8A%A0%E9%80%9F" title="NPM加速"></a>NPM加速</h3><p><code>NPM</code>默认是从 <span class="exturl" data-url="aHR0cDovL3JlZ2lzdGVyLm5wbWpzLm9yZy8=">http://register.npmjs.org/<i class="fa fa-external-link-alt"></i></span> 进行资源的下载，在碰到需要<code>node-gyp</code>进行编译的时候还要从 <span class="exturl" data-url="aHR0cDovL25vZGVqcy5vcmcvZGlzdC8=">http://nodejs.org/dist/<i class="fa fa-external-link-alt"></i></span> 重新下载一次资源，这会导致下载速度非常慢，通过下面命令切换下载源加速<code>NPM</code>。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm --registry=https://registry.npm.taobao.org --disturl=https://npm.taobao.org/dist</span><br></pre></td></tr></tbody></table></figure>

<h3 id="解决NPM全局安装需要Sudo的问题"><a href="#解决NPM全局安装需要Sudo的问题" class="headerlink" title="解决NPM全局安装需要Sudo的问题"></a><a href="#%E8%A7%A3%E5%86%B3NPM%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85%E9%9C%80%E8%A6%81Sudo%E7%9A%84%E9%97%AE%E9%A2%98" title="解决NPM全局安装需要Sudo的问题"></a>解决NPM全局安装需要Sudo的问题</h3><ol>
<li><p>创建全局包目录</p>
<p> $ mkdir “${HOME}/.npm-packages”</p>
</li>
<li><p>在.bash_profile/.zshrc中增加下面代码</p>
<p> NPM_PACKAGES=”${HOME}/.npm-packages”</p>
<p> NODE_PATH=”$NPM_PACKAGES/lib/node_modules:$NODE_PATH”</p>
<p> PATH=”$NPM_PACKAGES/bin:$PATH”</p>
</li>
<li><p>在 $HOME/.npmrc 中增加下面代码</p>
<p> prefix=${HOME}/.npm-packages</p>
</li>
</ol>
<p>如果你很懒，那么你可以看看 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dsZW5waWtlL25wbS1nX25vc3Vkbw==">这里<i class="fa fa-external-link-alt"></i></span> 的说明进行自动化帮你解决问题！</p>
<h3 id="npm-install-xxx报-EACCESS-mkdir错误"><a href="#npm-install-xxx报-EACCESS-mkdir错误" class="headerlink" title="npm install xxx报 EACCESS,mkdir错误"></a><a href="#npm-install-xxx%E6%8A%A5-EACCESS-mkdir%E9%94%99%E8%AF%AF" title="npm install xxx报 EACCESS,mkdir错误"></a>npm install xxx报 EACCESS,mkdir错误</h3><p>~/.npm目录权限问题，</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$GROUP</span> ~/.npm</span><br><span class="line"></span><br><span class="line">npm cache clean</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>“想换个活法” -- 记蜜月旅行</title>
    <url>//2024/07/22/%E6%83%B3%E6%8D%A2%E4%B8%AA%E6%B4%BB%E6%B3%95/</url>
    <content><![CDATA[<html><head></head><body><p><img data-src="/2024/07/22/%E6%83%B3%E6%8D%A2%E4%B8%AA%E6%B4%BB%E6%B3%95/img.png" alt="泰国旅行照"></p>
<p>  <strong>“想换个活法”</strong>，这是我近期内心深处涌现出的强烈愿望。<br>  在生活的长河中，我仿佛一直被一股无形的力量推着前行，走着一条看似既定的道路。然而，最近内心深处总有一个声音在不断回响：<strong>我想换个活法</strong>。<br>  回首过去这一年，我经历了人生中的许多大事。我与爱人订婚，在亲朋好友的祝福下，许下了相伴一生的承诺。随后，我们携手走进了婚姻的殿堂，那一天的幸福和感动至今仍历历在目。</p>
<span id="more"></span>
<p>  紧接着，我们踏上了浪漫的泰国蜜月之旅。在芭提雅，我们体验了精彩的成人秀和迷人的人妖秀，在岛上尽情享受浮潜和大海的乐趣，还在风月街悠然地散步，感受着独特的异国风情。在曼谷，我们来一场惬意的 citywalk，用脚步丈量这座城市的魅力。此外，我们还参加了大象活动日，与这些可爱的生灵亲密接触。<br>  这些美好的经历让我深感人生的丰富与多彩，但与此同时，我也开始思考生活的真正意义。<br>  每日的忙碌与奔波，让我像一个不停旋转的陀螺，却很少有时间停下来问问自己，这是否是我真正想要的生活。朝九晚五的工作，按部就班的日常，虽然安稳，但却让我感到内心的空虚和迷茫。<br>  如今，<strong>“换个活法”</strong> 的想法在我心中开始萌芽。我渴望打破这种惯性，去追寻一种更能让灵魂得到滋养的生活方式。但具体怎么做，我还没有清晰的规划，只是有了这样一个模糊而强烈的念头。<br>  或许不再被闹钟生硬地叫醒，而是迎着清晨的第一缕阳光自然苏醒；或许不再匆匆忙忙地在路边买个早餐就去挤公交，而是能悠然地为自己准备一份营养丰富的美食。<br>  我渴望不再让时间被无意义的会议和琐事填满，而是把更多的时光投入到自己热爱的事物中。比如读一本搁置已久的好书，学习一门一直感兴趣的外语，或者去探索未知的远方，感受不同的风土人情。<br>  我期待能拥有更多与家人和朋友相处的温馨时光，不再因为忙碌而忽略了他们的存在和感受。<br>  虽然现在还只是想法的开端，但我知道，这颗种子已经种下。我要勇敢地面对内心的恐惧和外界的质疑，因为只有勇敢迈出这一步，才有可能真正拥抱生活的无限可能。<br>  这不仅仅是一次生活方式的改变，更是一次自我的重新发现和成长之旅。我期待着在这个探索的过程中，让这颗萌芽的想法逐渐清晰，最终遇见一个更加真实、快乐和充满活力的自己。<br>  朋友们，你们是否也有过这样的冲动？是否也在心中种下了这样一颗想要改变的种子？</p>
</body></html>]]></content>
  </entry>
  <entry>
    <title>用掘金－Markdown 编辑器写文章</title>
    <url>//2018/12/11/%E6%8E%98%E9%87%91%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<html><head></head><body><h3 id="用掘金－Markdown-编辑器写文章"><a href="#用掘金－Markdown-编辑器写文章" class="headerlink" title="用掘金－Markdown 编辑器写文章"></a>用掘金－Markdown 编辑器写文章</h3><p>欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的 Markdown 引导指南，希望可以帮助您顺利的开始使用 Markdown 编辑器。</p>
<span id="more"></span>
<h3 id="丰富的快捷键"><a href="#丰富的快捷键" class="headerlink" title="丰富的快捷键"></a>丰富的快捷键</h3><p>本 Markdown 编辑器支持丰富的格式快捷键，可以非常便捷、轻松的使用 Markdown 语言，形成优美的排版和内容格式。</p>
<p>支持的快捷键有：</p>
<ul>
<li>加粗： <code>Ctrl/Cmd + B</code></li>
<li>标题： <code>Ctrl/Cmd + H</code></li>
<li>插入链接： <code>Ctrl/Cmd + K</code></li>
<li>插入代码： <code>Ctrl/Cmd + Shift + C</code></li>
<li>行内代码： <code>Ctrl/Cmd + Shift + K</code></li>
<li>插入图片： <code>Ctrl/Cmd + Shift + I</code></li>
<li>无序列表： <code>Ctrl/Cmd + Shift + L</code></li>
<li>撤销： <code>Ctrl/Cmd + Z</code></li>
</ul>
<h3 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><blockquote>
<p>语法格式：**’#’+’空格’+’文本’**</p>
</blockquote>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line"></span><br><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">### 三级标题</span><br><span class="line"></span><br><span class="line">#### 四级标题</span><br><span class="line"></span><br><span class="line">##### 五级标题</span><br><span class="line"></span><br><span class="line">###### 六级标题</span><br></pre></td></tr></tbody></table></figure>

<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><blockquote>
<p>无序列表语法格式：**’-‘ + ‘空格’ ＋ ‘文本’**</p>
</blockquote>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">- 文本一</span><br><span class="line">- 文本二</span><br><span class="line">- 文本三</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>有序列表语法格式：**’数字’ + ‘.’ + ‘空格’ + ‘文本’**</p>
</blockquote>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">1. 文本一</span><br><span class="line">2. 文本二</span><br><span class="line">3. 文本三</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>任务列表语法格式：**’-‘ + ‘空格’ + ‘[ ]’ + ‘文本’**</p>
</blockquote>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">- [x] 文本一</span><br><span class="line">- [ ] 文本二</span><br><span class="line">- [ ] 文本三</span><br></pre></td></tr></tbody></table></figure>

<h4 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h4><ul>
<li>在 Markdown 中插入链接不需要其他按钮，你只需要使用<code>［显示文本］(链接地址)</code>这样的格式语法即可。例如：<br><span class="exturl" data-url="aHR0cHM6Ly9nb2xkLnhpdHUuaW8v">稀土掘金<i class="fa fa-external-link-alt"></i></span></li>
<li>插入图片的语法与插入链接的语法很像，只是前面多了一个 <code>!</code>.语法如下：<br><code>![图片的标注](图片链接地址)</code></li>
</ul>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><blockquote>
<p>语法：**’&gt;’+’空格’+’文本’**</p>
</blockquote>
<p>例如：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">&gt; Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的 HTML 页面。</span><br></pre></td></tr></tbody></table></figure>

<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>如下是代码段的语法：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">```编程语言</span><br><span class="line">这是代码段</span><br><span class="line">```</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubbleSort</span>(<span class="params">alist</span>):</span><br><span class="line"> <span class="keyword">for</span> passnum <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(alist)-<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line"> <span class="comment">#print alist,passnum</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(passnum):</span><br><span class="line"> <span class="keyword">if</span> alist[i]&gt;alist[i+<span class="number">1</span>]:</span><br><span class="line"> temp = alist[i]</span><br><span class="line"> alist[i] = alist[i+<span class="number">1</span>]</span><br><span class="line"> alist[i+<span class="number">1</span>] = temp</span><br><span class="line"> <span class="keyword">return</span> alist</span><br></pre></td></tr></tbody></table></figure>

<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">**Markdown 　 Extra**　表格语法：</span><br><span class="line"></span><br><span class="line">| 项目   | 价格   |</span><br><span class="line">|--------|--------|</span><br><span class="line">| iPhone | \$560  |</span><br><span class="line">| iPad   | \$780  |</span><br><span class="line">| iMac   | \$1000 |</span><br><span class="line"></span><br><span class="line">可以使用冒号来定义对齐方式：</span><br><span class="line"></span><br><span class="line">| 项目   | 价格     | 数量 |</span><br><span class="line">|--------|---------|------|</span><br><span class="line">| iPhone | 6000 元  | 5    |</span><br><span class="line">| iPad   | 3800 元  | 12   |</span><br><span class="line">| iMac   | 10000 元 | 234  |</span><br></pre></td></tr></tbody></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>以上是最常见的 Markdown 的语法和格式，如果你还希望深入的学习 Markdown，可以参考这里<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBwaW5uLmNvbS9tYXJrZG93bi8=">Markdown 语法<i class="fa fa-external-link-alt"></i></span>，非常感谢使用<strong>掘金－Markdown 编辑器</strong>,希望为您提供舒适的写作体验。</p>
</body></html>]]></content>
      <categories>
        <category>网站应用</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>Markdown</tag>
        <tag>掘金</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊网络中的传输协议</title>
    <url>//2019/03/25/%E8%81%8A%E8%81%8A%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<html><head></head><body><p>一直说写这么一篇文章，可是都没什么时间静下心来整理，最近项目不是很忙，打算抽时间整理整理一些常用的方法，反正慢慢来嘛~~</p>
<h4 id="聊聊网络传输协议"><a href="#聊聊网络传输协议" class="headerlink" title="聊聊网络传输协议"></a>聊聊网络传输协议</h4><span id="more"></span>
<p><br>  网络传输协议，英文全名（Internet communication protocol）又叫互联网协议（Internet Protocol Suite）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。它常被通称为 TCP/IP 协议族（英语：TCP/IP Protocol Suite，或 TCP/IP Protocols），简称 TCP/IP。因为该协议家族的两个核心协议：TCP（传输控制协议）和 IP（网际协议），为该家族中最早通过的标准。由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为 TCP/IP 协议栈（英语：TCP/IP Protocol Stack） 。这些协议最早发源于美国国防部（缩写为 DoD）的 ARPA 网项目，因此也被称作 DoD 模型（DoD Model）。这个协议族由互联网工程任务组（IETF）负责维护。<br>  TCP/IP 提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层 OSI 模型。</p>
<blockquote>
<p>下图介绍了网络传输协议七层 OSI 模型图以及四层网络协议解构图：</p>
</blockquote>
<p><img data-src="/assets/img/2019/03/1.png" alt="image"><img data-src="/assets/img/2019/03/2.png" alt="image"></p>
<p>它们叫什么名字，其实并不重要。只需要知道，互联网传输协议分成若干层就可以了那么接下来我讲讲这个互联网络中的一些规定协议，这些协议大多都是我们常见的一些：。。。</p>
<p><img data-src="/assets/img/2019/03/3.png" alt="image"><img data-src="/assets/img/2019/03/4.png" alt="image"><img data-src="/assets/img/2019/03/5.png" alt="image"></p>
<h4 id="http-协议与-tcp-协议的恩怨情仇"><a href="#http-协议与-tcp-协议的恩怨情仇" class="headerlink" title="http 协议与 tcp 协议的恩怨情仇"></a>http 协议与 tcp 协议的恩怨情仇</h4><h5 id="tcp-三次握手和四次挥手"><a href="#tcp-三次握手和四次挥手" class="headerlink" title="tcp 三次握手和四次挥手"></a>tcp 三次握手和四次挥手</h5><p>讲这个 http 协议协议与 tcp 协议的恩怨情仇，就不得不提 tcp 的三次握手和四次挥手，从上图来看谁让人家是传输层，咱们是应用层呐！下图介绍了关于三次握手和四次挥手的拟人化描述!</p>
<p><img data-src="/assets/img/2019/03/6.png" alt="image"></p>
<p>动画介绍三次握手和四次挥手</p>
<p><img data-src="/assets/img/2019/03/7.gif" alt="image"><img data-src="/assets/img/2019/03/8.gif" alt="image"></p>
<blockquote>
<p>先写到这待补充完善！</p>
</blockquote>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUJEJTkxJUU3JUJCJTlDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JThEJThGJUU4JUFFJUFF">网络传输协议 - 维基百科，自由的百科全书<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvT1NJJUU2JUE4JUExJUU1JTlFJThC">OSI 模型 - 维基百科，自由的百科全书<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUI2JTg1JUU2JTk2JTg3JUU2JTlDJUFDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JThEJThGJUU4JUFFJUFF">超文本传输协议 - 维基百科，自由的百科全书<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF">互联网协议入门（一） - 阮一峰的网络日志<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF">TCP 协议 - 维基百科，自由的百科全书<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9TdGF0dXM=">MDN http 响应代码<i class="fa fa-external-link-alt"></i></span></li>
<li>《图解 HTTP 协议》</li>
<li>《计算机网络》</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>网络传输协议</category>
      </categories>
      <tags>
        <tag>网络传输协议</tag>
        <tag>TCP/IP协议族</tag>
        <tag>HTTP/HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Vscode 终端抱怨解析环境需要过多时间问题</title>
    <url>//2022/07/31/%E8%A7%A3%E5%86%B3-Vscode-%E7%BB%88%E7%AB%AF%E6%8A%B1%E6%80%A8%E8%A7%A3%E6%9E%90%E7%8E%AF%E5%A2%83%E9%9C%80%E8%A6%81%E8%BF%87%E5%A4%9A%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<html><head></head><body><p>当我从 Dock 启动 VSCode 时，它​​总是抱怨</p>
<blockquote>
<p>解析您的 shell 环境需要很长时间。请<br>检查您的外壳配置。</p>
</blockquote>
<span id="more"></span>

<p>然后稍后</p>
<blockquote>
<p>无法在合理的时间内解析您的 shell 环境。<br>请检查您的外壳配置。</p>
</blockquote>
<p>根据这个页面，<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9zdXBwb3J0aW5nL2ZhcSNfcmVzb2x2aW5nLXNoZWxsLWVudmlyb25tZW50LWlzLXNsb3ctZXJyb3Itd2FybmluZw==">Resolving Shell Environment is Slow<i class="fa fa-external-link-alt"></i></span>，如果 .bashrc 需要三秒以上，则显示第一条消息，如果需要十秒以上，则显示第二条消息。</p>
<p>我在 VSCode 中打开了一个终端并获取了我的 .bashrc 文件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Mark$ time <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">real    0m1.448s</span><br><span class="line">user    0m0.524s</span><br><span class="line">sys     0m0.671s</span><br></pre></td></tr></tbody></table></figure>

<p>如您所见，只需不到 1.5 秒。</p>
<p><strong>环境：</strong></p>
<ul>
<li>MacOS Monterey 12.5</li>
<li>VSCode 1.69.2</li>
</ul>
<p>希望有人知道是什么导致了这种情况。<br>除此之外，也许有人可以将我指向实际生成这些错误的代码。</p>
<p>遇到同样情况，发现问题：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC92c2NvZGUvaXNzdWVzLzExMzg2OSNpc3N1ZWNvbW1lbnQtNzgwMDcyOTA0">https://github.com/microsoft/vscode/issues/113869#issuecomment-780072904<i class="fa fa-external-link-alt"></i></span></p>
<p>我提取<code>nvm load code</code>到问题中的<code>condition function</code>参考，解决了这个问题：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">function load-nvm {</span><br><span class="line">  export NVM_DIR="$HOME/.nvm"</span><br><span class="line">  [ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh"  # This loads nvm</span><br><span class="line">  [ -s "$NVM_DIR/bash_completion" ] &amp;&amp; \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion</span><br><span class="line">  [[ -s `brew --prefix`/etc/autojump.sh ]] &amp;&amp; . `brew --prefix`/etc/autojump.sh</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"># nvm</span><br><span class="line">if [[ "x${TERM_PROGRAM}" = "xvscode" ]]; then</span><br><span class="line">  echo 'in vscode, nvm not work; use `load-nvm`';</span><br><span class="line">else</span><br><span class="line">  load-nvm</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>Vscode</tag>
      </tags>
  </entry>
</search>
